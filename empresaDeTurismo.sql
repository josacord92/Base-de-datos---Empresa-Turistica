-- MySQL Script generated by MySQL Workbench
-- 01/20/15 12:18:46
-- Model: New Model    Version: 1.0
-- MySQL Workbench Forward Engineering

SET @OLD_UNIQUE_CHECKS=@@UNIQUE_CHECKS, UNIQUE_CHECKS=0;
SET @OLD_FOREIGN_KEY_CHECKS=@@FOREIGN_KEY_CHECKS, FOREIGN_KEY_CHECKS=0;
SET @OLD_SQL_MODE=@@SQL_MODE, SQL_MODE='TRADITIONAL,ALLOW_INVALID_DATES';

-- -----------------------------------------------------
-- Schema empresaDeTurismoDB
-- -----------------------------------------------------
DROP SCHEMA IF EXISTS `empresaDeTurismoDB` ;

-- -----------------------------------------------------
-- Schema empresaDeTurismoDB
-- -----------------------------------------------------
CREATE SCHEMA IF NOT EXISTS `empresaDeTurismoDB` DEFAULT CHARACTER SET utf8 COLLATE utf8_general_ci ;
USE `empresaDeTurismoDB` ;

-- -----------------------------------------------------
-- Table `empresaDeTurismoDB`.`Empresa`
-- -----------------------------------------------------
DROP TABLE IF EXISTS `empresaDeTurismoDB`.`Empresa` ;

CREATE TABLE IF NOT EXISTS `empresaDeTurismoDB`.`Empresa` (
  `idEmpresa` INT NOT NULL AUTO_INCREMENT,
  `nombre` VARCHAR(50) NOT NULL,
  PRIMARY KEY (`idEmpresa`))
ENGINE = InnoDB;


-- -----------------------------------------------------
-- Table `empresaDeTurismoDB`.`Pais`
-- -----------------------------------------------------
DROP TABLE IF EXISTS `empresaDeTurismoDB`.`Pais` ;

CREATE TABLE IF NOT EXISTS `empresaDeTurismoDB`.`Pais` (
  `idPais` INT NOT NULL AUTO_INCREMENT,
  `nombre` VARCHAR(100) NOT NULL,
  PRIMARY KEY (`idPais`))
ENGINE = InnoDB;


-- -----------------------------------------------------
-- Table `empresaDeTurismoDB`.`Estado`
-- -----------------------------------------------------
DROP TABLE IF EXISTS `empresaDeTurismoDB`.`Estado` ;

CREATE TABLE IF NOT EXISTS `empresaDeTurismoDB`.`Estado` (
  `idEstado` INT NOT NULL AUTO_INCREMENT,
  `idPais` INT NOT NULL,
  `nombre` VARCHAR(100) NOT NULL,
  PRIMARY KEY (`idEstado`),
  INDEX `fk_Estado_Pais1_idx` (`idPais` ASC),
  CONSTRAINT `fk_Estado_Pais1`
    FOREIGN KEY (`idPais`)
    REFERENCES `empresaDeTurismoDB`.`Pais` (`idPais`)
    ON DELETE NO ACTION
    ON UPDATE NO ACTION)
ENGINE = InnoDB;


-- -----------------------------------------------------
-- Table `empresaDeTurismoDB`.`Ciudad`
-- -----------------------------------------------------
DROP TABLE IF EXISTS `empresaDeTurismoDB`.`Ciudad` ;

CREATE TABLE IF NOT EXISTS `empresaDeTurismoDB`.`Ciudad` (
  `idCiudad` INT NOT NULL AUTO_INCREMENT,
  `idEstado` INT NOT NULL,
  `nombre` VARCHAR(100) NOT NULL,
  PRIMARY KEY (`idCiudad`),
  INDEX `fk_Ciudad_Estado1_idx` (`idEstado` ASC),
  CONSTRAINT `fk_Ciudad_Estado1`
    FOREIGN KEY (`idEstado`)
    REFERENCES `empresaDeTurismoDB`.`Estado` (`idEstado`)
    ON DELETE NO ACTION
    ON UPDATE NO ACTION)
ENGINE = InnoDB;


-- -----------------------------------------------------
-- Table `empresaDeTurismoDB`.`Direccion`
-- -----------------------------------------------------
DROP TABLE IF EXISTS `empresaDeTurismoDB`.`Direccion` ;

CREATE TABLE IF NOT EXISTS `empresaDeTurismoDB`.`Direccion` (
  `idDireccion` INT NOT NULL AUTO_INCREMENT,
  `idCiudad` INT NOT NULL,
  PRIMARY KEY (`idDireccion`),
  INDEX `fk_Direccion_Ciudad1_idx` (`idCiudad` ASC),
  CONSTRAINT `fk_Direccion_Ciudad1`
    FOREIGN KEY (`idCiudad`)
    REFERENCES `empresaDeTurismoDB`.`Ciudad` (`idCiudad`)
    ON DELETE NO ACTION
    ON UPDATE NO ACTION)
ENGINE = InnoDB;


-- -----------------------------------------------------
-- Table `empresaDeTurismoDB`.`Sucursal`
-- -----------------------------------------------------
DROP TABLE IF EXISTS `empresaDeTurismoDB`.`Sucursal` ;

CREATE TABLE IF NOT EXISTS `empresaDeTurismoDB`.`Sucursal` (
  `idSucursal` INT NOT NULL AUTO_INCREMENT,
  `idEmpresa` INT NOT NULL,
  `idDireccion` INT NOT NULL,
  `nombre` VARCHAR(50) NOT NULL,
  PRIMARY KEY (`idSucursal`),
  INDEX `fk_Sucursal_Empresa_idx` (`idEmpresa` ASC),
  INDEX `fk_Sucursal_Direccion1_idx` (`idDireccion` ASC),
  CONSTRAINT `fk_Sucursal_Empresa`
    FOREIGN KEY (`idEmpresa`)
    REFERENCES `empresaDeTurismoDB`.`Empresa` (`idEmpresa`)
    ON DELETE NO ACTION
    ON UPDATE NO ACTION,
  CONSTRAINT `fk_Sucursal_Direccion1`
    FOREIGN KEY (`idDireccion`)
    REFERENCES `empresaDeTurismoDB`.`Direccion` (`idDireccion`)
    ON DELETE NO ACTION
    ON UPDATE NO ACTION)
ENGINE = InnoDB;


-- -----------------------------------------------------
-- Table `empresaDeTurismoDB`.`Cliente`
-- -----------------------------------------------------
DROP TABLE IF EXISTS `empresaDeTurismoDB`.`Cliente` ;

CREATE TABLE IF NOT EXISTS `empresaDeTurismoDB`.`Cliente` (
  `idCliente` INT NOT NULL AUTO_INCREMENT,
  `nombre` VARCHAR(50) NOT NULL,
  `cedula` VARCHAR(50) NOT NULL,
  PRIMARY KEY (`idCliente`))
ENGINE = InnoDB;


-- -----------------------------------------------------
-- Table `empresaDeTurismoDB`.`ClientexDireccion`
-- -----------------------------------------------------
DROP TABLE IF EXISTS `empresaDeTurismoDB`.`ClientexDireccion` ;

CREATE TABLE IF NOT EXISTS `empresaDeTurismoDB`.`ClientexDireccion` (
  `idClientexDireccion` INT NOT NULL AUTO_INCREMENT,
  `idCliente` INT NOT NULL,
  `idDireccion` INT NOT NULL,
  PRIMARY KEY (`idClientexDireccion`),
  INDEX `fk_ClientexDireccion_Cliente1_idx` (`idCliente` ASC),
  INDEX `fk_ClientexDireccion_Direccion1_idx` (`idDireccion` ASC),
  CONSTRAINT `fk_ClientexDireccion_Cliente1`
    FOREIGN KEY (`idCliente`)
    REFERENCES `empresaDeTurismoDB`.`Cliente` (`idCliente`)
    ON DELETE NO ACTION
    ON UPDATE NO ACTION,
  CONSTRAINT `fk_ClientexDireccion_Direccion1`
    FOREIGN KEY (`idDireccion`)
    REFERENCES `empresaDeTurismoDB`.`Direccion` (`idDireccion`)
    ON DELETE NO ACTION
    ON UPDATE NO ACTION)
ENGINE = InnoDB;


-- -----------------------------------------------------
-- Table `empresaDeTurismoDB`.`TipoPuesto`
-- -----------------------------------------------------
DROP TABLE IF EXISTS `empresaDeTurismoDB`.`TipoPuesto` ;

CREATE TABLE IF NOT EXISTS `empresaDeTurismoDB`.`TipoPuesto` (
  `idTipoPuesto` INT NOT NULL AUTO_INCREMENT,
  `nombre` VARCHAR(50) NOT NULL,
  PRIMARY KEY (`idTipoPuesto`))
ENGINE = InnoDB;


-- -----------------------------------------------------
-- Table `empresaDeTurismoDB`.`Puesto`
-- -----------------------------------------------------
DROP TABLE IF EXISTS `empresaDeTurismoDB`.`Puesto` ;

CREATE TABLE IF NOT EXISTS `empresaDeTurismoDB`.`Puesto` (
  `idPuesto` INT NOT NULL AUTO_INCREMENT,
  `idTipoPuesto` INT NOT NULL,
  `hrsLaborarxDia` FLOAT NOT NULL,
  `porcentajeComision` FLOAT NOT NULL,
  `salario` DECIMAL(65,2) NOT NULL,
  PRIMARY KEY (`idPuesto`),
  INDEX `fk_Puesto_TipoPuesto1_idx` (`idTipoPuesto` ASC),
  CONSTRAINT `fk_Puesto_TipoPuesto1`
    FOREIGN KEY (`idTipoPuesto`)
    REFERENCES `empresaDeTurismoDB`.`TipoPuesto` (`idTipoPuesto`)
    ON DELETE NO ACTION
    ON UPDATE NO ACTION)
ENGINE = InnoDB;


-- -----------------------------------------------------
-- Table `empresaDeTurismoDB`.`Empleado`
-- -----------------------------------------------------
DROP TABLE IF EXISTS `empresaDeTurismoDB`.`Empleado` ;

CREATE TABLE IF NOT EXISTS `empresaDeTurismoDB`.`Empleado` (
  `idEmpleado` INT NOT NULL AUTO_INCREMENT,
  `idSucursal` INT NOT NULL,
  `idPuesto` INT NOT NULL,
  `nombre` VARCHAR(50) NOT NULL,
  `administradorFlag` BIT NOT NULL,
  `carne` VARCHAR(50) NOT NULL,
  PRIMARY KEY (`idEmpleado`),
  INDEX `fk_Empleado_Puesto1_idx` (`idPuesto` ASC),
  INDEX `fk_Empleado_Sucursal1_idx` (`idSucursal` ASC),
  CONSTRAINT `fk_Empleado_Puesto1`
    FOREIGN KEY (`idPuesto`)
    REFERENCES `empresaDeTurismoDB`.`Puesto` (`idPuesto`)
    ON DELETE NO ACTION
    ON UPDATE NO ACTION,
  CONSTRAINT `fk_Empleado_Sucursal1`
    FOREIGN KEY (`idSucursal`)
    REFERENCES `empresaDeTurismoDB`.`Sucursal` (`idSucursal`)
    ON DELETE NO ACTION
    ON UPDATE NO ACTION)
ENGINE = InnoDB;


-- -----------------------------------------------------
-- Table `empresaDeTurismoDB`.`EstadoVenta`
-- -----------------------------------------------------
DROP TABLE IF EXISTS `empresaDeTurismoDB`.`EstadoVenta` ;

CREATE TABLE IF NOT EXISTS `empresaDeTurismoDB`.`EstadoVenta` (
  `idEstadoVenta` INT NOT NULL AUTO_INCREMENT,
  `nombre` VARCHAR(50) NOT NULL,
  `descripcion` VARCHAR(100) NOT NULL,
  PRIMARY KEY (`idEstadoVenta`))
ENGINE = InnoDB;


-- -----------------------------------------------------
-- Table `empresaDeTurismoDB`.`Medio`
-- -----------------------------------------------------
DROP TABLE IF EXISTS `empresaDeTurismoDB`.`Medio` ;

CREATE TABLE IF NOT EXISTS `empresaDeTurismoDB`.`Medio` (
  `idMedio` INT NOT NULL AUTO_INCREMENT,
  `nombre` VARCHAR(50) NOT NULL,
  PRIMARY KEY (`idMedio`))
ENGINE = InnoDB;


-- -----------------------------------------------------
-- Table `empresaDeTurismoDB`.`Paquete`
-- -----------------------------------------------------
DROP TABLE IF EXISTS `empresaDeTurismoDB`.`Paquete` ;

CREATE TABLE IF NOT EXISTS `empresaDeTurismoDB`.`Paquete` (
  `idPaquete` INT NOT NULL AUTO_INCREMENT,
  `idSucursal` INT NOT NULL,
  `cantidadDisponible` INT NOT NULL,
  `fechaTour` DATE NOT NULL,
  `precio` DECIMAL(65,2) NOT NULL,
  `capacidadPersonas` INT NOT NULL,
  `nombre` VARCHAR(50) NOT NULL,
  PRIMARY KEY (`idPaquete`),
  INDEX `fk_Paquete_Sucursal1_idx` (`idSucursal` ASC),
  CONSTRAINT `fk_Paquete_Sucursal1`
    FOREIGN KEY (`idSucursal`)
    REFERENCES `empresaDeTurismoDB`.`Sucursal` (`idSucursal`)
    ON DELETE NO ACTION
    ON UPDATE NO ACTION)
ENGINE = InnoDB;


-- -----------------------------------------------------
-- Table `empresaDeTurismoDB`.`Venta`
-- -----------------------------------------------------
DROP TABLE IF EXISTS `empresaDeTurismoDB`.`Venta` ;

CREATE TABLE IF NOT EXISTS `empresaDeTurismoDB`.`Venta` (
  `idVenta` INT NOT NULL AUTO_INCREMENT,
  `idEmpleado` INT NOT NULL,
  `idCliente` INT NOT NULL,
  `idEstadoVenta` INT NOT NULL,
  `idMedio` INT NOT NULL,
  `idPaquete` INT NOT NULL,
  `fecha` DATE NOT NULL,
  `montoTotal` DECIMAL(65,2) NOT NULL,
  `montoActual` DECIMAL(65,2) NOT NULL,
  `descuento` FLOAT NOT NULL,
  `numeroReferencia` INT NOT NULL,
  PRIMARY KEY (`idVenta`),
  INDEX `fk_Venta_Empleado1_idx` (`idEmpleado` ASC),
  INDEX `fk_Venta_Cliente1_idx` (`idCliente` ASC),
  INDEX `fk_Venta_EstadoVenta1_idx` (`idEstadoVenta` ASC),
  INDEX `fk_Venta_Medio1_idx` (`idMedio` ASC),
  INDEX `fk_Venta_Paquete1_idx` (`idPaquete` ASC),
  CONSTRAINT `fk_Venta_Empleado1`
    FOREIGN KEY (`idEmpleado`)
    REFERENCES `empresaDeTurismoDB`.`Empleado` (`idEmpleado`)
    ON DELETE NO ACTION
    ON UPDATE NO ACTION,
  CONSTRAINT `fk_Venta_Cliente1`
    FOREIGN KEY (`idCliente`)
    REFERENCES `empresaDeTurismoDB`.`Cliente` (`idCliente`)
    ON DELETE NO ACTION
    ON UPDATE NO ACTION,
  CONSTRAINT `fk_Venta_EstadoVenta1`
    FOREIGN KEY (`idEstadoVenta`)
    REFERENCES `empresaDeTurismoDB`.`EstadoVenta` (`idEstadoVenta`)
    ON DELETE NO ACTION
    ON UPDATE NO ACTION,
  CONSTRAINT `fk_Venta_Medio1`
    FOREIGN KEY (`idMedio`)
    REFERENCES `empresaDeTurismoDB`.`Medio` (`idMedio`)
    ON DELETE NO ACTION
    ON UPDATE NO ACTION,
  CONSTRAINT `fk_Venta_Paquete1`
    FOREIGN KEY (`idPaquete`)
    REFERENCES `empresaDeTurismoDB`.`Paquete` (`idPaquete`)
    ON DELETE NO ACTION
    ON UPDATE NO ACTION)
ENGINE = InnoDB;


-- -----------------------------------------------------
-- Table `empresaDeTurismoDB`.`EmpleadoxDireccion`
-- -----------------------------------------------------
DROP TABLE IF EXISTS `empresaDeTurismoDB`.`EmpleadoxDireccion` ;

CREATE TABLE IF NOT EXISTS `empresaDeTurismoDB`.`EmpleadoxDireccion` (
  `idEmpleadoxDireccion` INT NOT NULL AUTO_INCREMENT,
  `idEmpleado` INT NOT NULL,
  `idDireccion` INT NOT NULL,
  PRIMARY KEY (`idEmpleadoxDireccion`),
  INDEX `fk_EmpleadoxDireccion_Empleado1_idx` (`idEmpleado` ASC),
  INDEX `fk_EmpleadoxDireccion_Direccion1_idx` (`idDireccion` ASC),
  CONSTRAINT `fk_EmpleadoxDireccion_Empleado1`
    FOREIGN KEY (`idEmpleado`)
    REFERENCES `empresaDeTurismoDB`.`Empleado` (`idEmpleado`)
    ON DELETE NO ACTION
    ON UPDATE NO ACTION,
  CONSTRAINT `fk_EmpleadoxDireccion_Direccion1`
    FOREIGN KEY (`idDireccion`)
    REFERENCES `empresaDeTurismoDB`.`Direccion` (`idDireccion`)
    ON DELETE NO ACTION
    ON UPDATE NO ACTION)
ENGINE = InnoDB;


-- -----------------------------------------------------
-- Table `empresaDeTurismoDB`.`Telefono`
-- -----------------------------------------------------
DROP TABLE IF EXISTS `empresaDeTurismoDB`.`Telefono` ;

CREATE TABLE IF NOT EXISTS `empresaDeTurismoDB`.`Telefono` (
  `idTelefono` INT NOT NULL AUTO_INCREMENT,
  `numero` VARCHAR(50) NOT NULL,
  PRIMARY KEY (`idTelefono`))
ENGINE = InnoDB;


-- -----------------------------------------------------
-- Table `empresaDeTurismoDB`.`ClientexTelefono`
-- -----------------------------------------------------
DROP TABLE IF EXISTS `empresaDeTurismoDB`.`ClientexTelefono` ;

CREATE TABLE IF NOT EXISTS `empresaDeTurismoDB`.`ClientexTelefono` (
  `idClientexTelefono` INT NOT NULL AUTO_INCREMENT,
  `idCliente` INT NOT NULL,
  `idTelefono` INT NOT NULL,
  PRIMARY KEY (`idClientexTelefono`),
  INDEX `fk_ClientexTelefono_Cliente1_idx` (`idCliente` ASC),
  INDEX `fk_ClientexTelefono_Telefono1_idx` (`idTelefono` ASC),
  CONSTRAINT `fk_ClientexTelefono_Cliente1`
    FOREIGN KEY (`idCliente`)
    REFERENCES `empresaDeTurismoDB`.`Cliente` (`idCliente`)
    ON DELETE NO ACTION
    ON UPDATE NO ACTION,
  CONSTRAINT `fk_ClientexTelefono_Telefono1`
    FOREIGN KEY (`idTelefono`)
    REFERENCES `empresaDeTurismoDB`.`Telefono` (`idTelefono`)
    ON DELETE NO ACTION
    ON UPDATE NO ACTION)
ENGINE = InnoDB;


-- -----------------------------------------------------
-- Table `empresaDeTurismoDB`.`Hotel`
-- -----------------------------------------------------
DROP TABLE IF EXISTS `empresaDeTurismoDB`.`Hotel` ;

CREATE TABLE IF NOT EXISTS `empresaDeTurismoDB`.`Hotel` (
  `idHotel` INT NOT NULL AUTO_INCREMENT,
  `idDireccion` INT NOT NULL,
  `nombre` VARCHAR(45) NOT NULL,
  PRIMARY KEY (`idHotel`),
  INDEX `fk_Hotel_Direccion1_idx` (`idDireccion` ASC),
  CONSTRAINT `fk_Hotel_Direccion1`
    FOREIGN KEY (`idDireccion`)
    REFERENCES `empresaDeTurismoDB`.`Direccion` (`idDireccion`)
    ON DELETE NO ACTION
    ON UPDATE NO ACTION)
ENGINE = InnoDB;


-- -----------------------------------------------------
-- Table `empresaDeTurismoDB`.`Lugar`
-- -----------------------------------------------------
DROP TABLE IF EXISTS `empresaDeTurismoDB`.`Lugar` ;

CREATE TABLE IF NOT EXISTS `empresaDeTurismoDB`.`Lugar` (
  `idLugar` INT NOT NULL AUTO_INCREMENT,
  `idDireccion` INT NOT NULL,
  `nombre` VARCHAR(50) NOT NULL,
  PRIMARY KEY (`idLugar`),
  INDEX `fk_Lugar_Direccion1_idx` (`idDireccion` ASC),
  CONSTRAINT `fk_Lugar_Direccion1`
    FOREIGN KEY (`idDireccion`)
    REFERENCES `empresaDeTurismoDB`.`Direccion` (`idDireccion`)
    ON DELETE NO ACTION
    ON UPDATE NO ACTION)
ENGINE = InnoDB;


-- -----------------------------------------------------
-- Table `empresaDeTurismoDB`.`EmpleadoxTelefono`
-- -----------------------------------------------------
DROP TABLE IF EXISTS `empresaDeTurismoDB`.`EmpleadoxTelefono` ;

CREATE TABLE IF NOT EXISTS `empresaDeTurismoDB`.`EmpleadoxTelefono` (
  `idEmpleadoxTelefono` INT NOT NULL AUTO_INCREMENT,
  `idEmpleado` INT NOT NULL,
  `idTelefono` INT NOT NULL,
  PRIMARY KEY (`idEmpleadoxTelefono`),
  INDEX `fk_EmpleadoxTelefono_Telefono1_idx` (`idTelefono` ASC),
  INDEX `fk_EmpleadoxTelefono_Empleado1_idx` (`idEmpleado` ASC),
  CONSTRAINT `fk_EmpleadoxTelefono_Telefono1`
    FOREIGN KEY (`idTelefono`)
    REFERENCES `empresaDeTurismoDB`.`Telefono` (`idTelefono`)
    ON DELETE NO ACTION
    ON UPDATE NO ACTION,
  CONSTRAINT `fk_EmpleadoxTelefono_Empleado1`
    FOREIGN KEY (`idEmpleado`)
    REFERENCES `empresaDeTurismoDB`.`Empleado` (`idEmpleado`)
    ON DELETE NO ACTION
    ON UPDATE NO ACTION)
ENGINE = InnoDB;


-- -----------------------------------------------------
-- Table `empresaDeTurismoDB`.`TipoTransporte`
-- -----------------------------------------------------
DROP TABLE IF EXISTS `empresaDeTurismoDB`.`TipoTransporte` ;

CREATE TABLE IF NOT EXISTS `empresaDeTurismoDB`.`TipoTransporte` (
  `idTipoTransporte` INT NOT NULL AUTO_INCREMENT,
  `nombre` VARCHAR(50) NOT NULL,
  PRIMARY KEY (`idTipoTransporte`))
ENGINE = InnoDB;


-- -----------------------------------------------------
-- Table `empresaDeTurismoDB`.`Transporte`
-- -----------------------------------------------------
DROP TABLE IF EXISTS `empresaDeTurismoDB`.`Transporte` ;

CREATE TABLE IF NOT EXISTS `empresaDeTurismoDB`.`Transporte` (
  `idTransporte` INT NOT NULL AUTO_INCREMENT,
  `fechaSalida` DATE NOT NULL,
  `fechaLlegada` DATE NOT NULL,
  `idLugarSalida` INT NOT NULL,
  `idLugarLlegada` INT NOT NULL,
  `idTipoTransporte` INT NOT NULL,
  PRIMARY KEY (`idTransporte`),
  INDEX `fk_Transporte_Lugar1_idx` (`idLugarSalida` ASC),
  INDEX `fk_Transporte_Lugar2_idx` (`idLugarLlegada` ASC),
  INDEX `fk_Transporte_TipoTransporte1_idx` (`idTipoTransporte` ASC),
  CONSTRAINT `fk_Transporte_Lugar1`
    FOREIGN KEY (`idLugarSalida`)
    REFERENCES `empresaDeTurismoDB`.`Lugar` (`idLugar`)
    ON DELETE NO ACTION
    ON UPDATE NO ACTION,
  CONSTRAINT `fk_Transporte_Lugar2`
    FOREIGN KEY (`idLugarLlegada`)
    REFERENCES `empresaDeTurismoDB`.`Lugar` (`idLugar`)
    ON DELETE NO ACTION
    ON UPDATE NO ACTION,
  CONSTRAINT `fk_Transporte_TipoTransporte1`
    FOREIGN KEY (`idTipoTransporte`)
    REFERENCES `empresaDeTurismoDB`.`TipoTransporte` (`idTipoTransporte`)
    ON DELETE NO ACTION
    ON UPDATE NO ACTION)
ENGINE = InnoDB;


-- -----------------------------------------------------
-- Table `empresaDeTurismoDB`.`Asiento`
-- -----------------------------------------------------
DROP TABLE IF EXISTS `empresaDeTurismoDB`.`Asiento` ;

CREATE TABLE IF NOT EXISTS `empresaDeTurismoDB`.`Asiento` (
  `idAsiento` INT NOT NULL AUTO_INCREMENT,
  `idTransporte` INT NOT NULL,
  `numero` INT NOT NULL,
  PRIMARY KEY (`idAsiento`),
  INDEX `fk_Asiento_Transporte1_idx` (`idTransporte` ASC),
  CONSTRAINT `fk_Asiento_Transporte1`
    FOREIGN KEY (`idTransporte`)
    REFERENCES `empresaDeTurismoDB`.`Transporte` (`idTransporte`)
    ON DELETE NO ACTION
    ON UPDATE NO ACTION)
ENGINE = InnoDB;


-- -----------------------------------------------------
-- Table `empresaDeTurismoDB`.`HotelxTelefono`
-- -----------------------------------------------------
DROP TABLE IF EXISTS `empresaDeTurismoDB`.`HotelxTelefono` ;

CREATE TABLE IF NOT EXISTS `empresaDeTurismoDB`.`HotelxTelefono` (
  `idHotelxTelefono` INT NOT NULL AUTO_INCREMENT,
  `idHotel` INT NOT NULL,
  `idTelefono` INT NOT NULL,
  PRIMARY KEY (`idHotelxTelefono`),
  INDEX `fk_HotelxTelefono_Hotel1_idx` (`idHotel` ASC),
  INDEX `fk_HotelxTelefono_Telefono1_idx` (`idTelefono` ASC),
  CONSTRAINT `fk_HotelxTelefono_Hotel1`
    FOREIGN KEY (`idHotel`)
    REFERENCES `empresaDeTurismoDB`.`Hotel` (`idHotel`)
    ON DELETE NO ACTION
    ON UPDATE NO ACTION,
  CONSTRAINT `fk_HotelxTelefono_Telefono1`
    FOREIGN KEY (`idTelefono`)
    REFERENCES `empresaDeTurismoDB`.`Telefono` (`idTelefono`)
    ON DELETE NO ACTION
    ON UPDATE NO ACTION)
ENGINE = InnoDB;


-- -----------------------------------------------------
-- Table `empresaDeTurismoDB`.`Reservacion`
-- -----------------------------------------------------
DROP TABLE IF EXISTS `empresaDeTurismoDB`.`Reservacion` ;

CREATE TABLE IF NOT EXISTS `empresaDeTurismoDB`.`Reservacion` (
  `idReservacion` INT NOT NULL AUTO_INCREMENT,
  `idCliente` INT NOT NULL,
  `idMedio` INT NOT NULL,
  `idPaquete` INT NOT NULL,
  PRIMARY KEY (`idReservacion`),
  INDEX `fk_Reservacion_Cliente1_idx` (`idCliente` ASC),
  INDEX `fk_Reservacion_Medio1_idx` (`idMedio` ASC),
  INDEX `fk_Reservacion_Paquete1_idx` (`idPaquete` ASC),
  CONSTRAINT `fk_Reservacion_Cliente1`
    FOREIGN KEY (`idCliente`)
    REFERENCES `empresaDeTurismoDB`.`Cliente` (`idCliente`)
    ON DELETE NO ACTION
    ON UPDATE NO ACTION,
  CONSTRAINT `fk_Reservacion_Medio1`
    FOREIGN KEY (`idMedio`)
    REFERENCES `empresaDeTurismoDB`.`Medio` (`idMedio`)
    ON DELETE NO ACTION
    ON UPDATE NO ACTION,
  CONSTRAINT `fk_Reservacion_Paquete1`
    FOREIGN KEY (`idPaquete`)
    REFERENCES `empresaDeTurismoDB`.`Paquete` (`idPaquete`)
    ON DELETE NO ACTION
    ON UPDATE NO ACTION)
ENGINE = InnoDB;


-- -----------------------------------------------------
-- Table `empresaDeTurismoDB`.`ReservacionxAsiento`
-- -----------------------------------------------------
DROP TABLE IF EXISTS `empresaDeTurismoDB`.`ReservacionxAsiento` ;

CREATE TABLE IF NOT EXISTS `empresaDeTurismoDB`.`ReservacionxAsiento` (
  `idReservacionxAsiento` INT NOT NULL AUTO_INCREMENT,
  `idReservacion` INT NOT NULL,
  `idAsiento` INT NOT NULL,
  PRIMARY KEY (`idReservacionxAsiento`),
  INDEX `fk_ReservacionxAsiento_Reservacion1_idx` (`idReservacion` ASC),
  INDEX `fk_ReservacionxAsiento_Asiento1_idx` (`idAsiento` ASC),
  CONSTRAINT `fk_ReservacionxAsiento_Reservacion1`
    FOREIGN KEY (`idReservacion`)
    REFERENCES `empresaDeTurismoDB`.`Reservacion` (`idReservacion`)
    ON DELETE NO ACTION
    ON UPDATE NO ACTION,
  CONSTRAINT `fk_ReservacionxAsiento_Asiento1`
    FOREIGN KEY (`idAsiento`)
    REFERENCES `empresaDeTurismoDB`.`Asiento` (`idAsiento`)
    ON DELETE NO ACTION
    ON UPDATE NO ACTION)
ENGINE = InnoDB;


-- -----------------------------------------------------
-- Table `empresaDeTurismoDB`.`Habitacion`
-- -----------------------------------------------------
DROP TABLE IF EXISTS `empresaDeTurismoDB`.`Habitacion` ;

CREATE TABLE IF NOT EXISTS `empresaDeTurismoDB`.`Habitacion` (
  `idHabitacion` INT NOT NULL AUTO_INCREMENT,
  `idHotel` INT NOT NULL,
  `numero` INT NOT NULL,
  PRIMARY KEY (`idHabitacion`),
  INDEX `fk_Habitacion_Hotel1_idx` (`idHotel` ASC),
  CONSTRAINT `fk_Habitacion_Hotel1`
    FOREIGN KEY (`idHotel`)
    REFERENCES `empresaDeTurismoDB`.`Hotel` (`idHotel`)
    ON DELETE NO ACTION
    ON UPDATE NO ACTION)
ENGINE = InnoDB;


-- -----------------------------------------------------
-- Table `empresaDeTurismoDB`.`ReservacionxHabitacion`
-- -----------------------------------------------------
DROP TABLE IF EXISTS `empresaDeTurismoDB`.`ReservacionxHabitacion` ;

CREATE TABLE IF NOT EXISTS `empresaDeTurismoDB`.`ReservacionxHabitacion` (
  `idReservacionxHabitacion` INT NOT NULL AUTO_INCREMENT,
  `idReservacion` INT NOT NULL,
  `idHabitacion` INT NOT NULL,
  PRIMARY KEY (`idReservacionxHabitacion`),
  INDEX `fk_ReservacionxHabitacion_Reservacion1_idx` (`idReservacion` ASC),
  INDEX `fk_ReservacionxHabitacion_Habitacion1_idx` (`idHabitacion` ASC),
  CONSTRAINT `fk_ReservacionxHabitacion_Reservacion1`
    FOREIGN KEY (`idReservacion`)
    REFERENCES `empresaDeTurismoDB`.`Reservacion` (`idReservacion`)
    ON DELETE NO ACTION
    ON UPDATE NO ACTION,
  CONSTRAINT `fk_ReservacionxHabitacion_Habitacion1`
    FOREIGN KEY (`idHabitacion`)
    REFERENCES `empresaDeTurismoDB`.`Habitacion` (`idHabitacion`)
    ON DELETE NO ACTION
    ON UPDATE NO ACTION)
ENGINE = InnoDB;


-- -----------------------------------------------------
-- Table `empresaDeTurismoDB`.`SucursalxTelefono`
-- -----------------------------------------------------
DROP TABLE IF EXISTS `empresaDeTurismoDB`.`SucursalxTelefono` ;

CREATE TABLE IF NOT EXISTS `empresaDeTurismoDB`.`SucursalxTelefono` (
  `idSucursalxTelefono` INT NOT NULL AUTO_INCREMENT,
  `idSucursal` INT NOT NULL,
  `idTelefono` INT NOT NULL,
  PRIMARY KEY (`idSucursalxTelefono`),
  INDEX `fk_SucursalxTelefono_Sucursal1_idx` (`idSucursal` ASC),
  INDEX `fk_SucursalxTelefono_Telefono1_idx` (`idTelefono` ASC),
  CONSTRAINT `fk_SucursalxTelefono_Sucursal1`
    FOREIGN KEY (`idSucursal`)
    REFERENCES `empresaDeTurismoDB`.`Sucursal` (`idSucursal`)
    ON DELETE NO ACTION
    ON UPDATE NO ACTION,
  CONSTRAINT `fk_SucursalxTelefono_Telefono1`
    FOREIGN KEY (`idTelefono`)
    REFERENCES `empresaDeTurismoDB`.`Telefono` (`idTelefono`)
    ON DELETE NO ACTION
    ON UPDATE NO ACTION)
ENGINE = InnoDB;


-- -----------------------------------------------------
-- Table `empresaDeTurismoDB`.`Alergia`
-- -----------------------------------------------------
DROP TABLE IF EXISTS `empresaDeTurismoDB`.`Alergia` ;

CREATE TABLE IF NOT EXISTS `empresaDeTurismoDB`.`Alergia` (
  `idAlergia` INT NOT NULL AUTO_INCREMENT,
  `nombre` VARCHAR(50) NOT NULL,
  `descripcion` VARCHAR(100) NOT NULL,
  PRIMARY KEY (`idAlergia`))
ENGINE = InnoDB;


-- -----------------------------------------------------
-- Table `empresaDeTurismoDB`.`ClientexAlergia`
-- -----------------------------------------------------
DROP TABLE IF EXISTS `empresaDeTurismoDB`.`ClientexAlergia` ;

CREATE TABLE IF NOT EXISTS `empresaDeTurismoDB`.`ClientexAlergia` (
  `idClientexAlergia` INT NOT NULL AUTO_INCREMENT,
  `idCliente` INT NOT NULL,
  `idAlergia` INT NOT NULL,
  PRIMARY KEY (`idClientexAlergia`),
  INDEX `fk_ClientexAlergia_Alergia1_idx` (`idAlergia` ASC),
  INDEX `fk_ClientexAlergia_Cliente1_idx` (`idCliente` ASC),
  CONSTRAINT `fk_ClientexAlergia_Alergia1`
    FOREIGN KEY (`idAlergia`)
    REFERENCES `empresaDeTurismoDB`.`Alergia` (`idAlergia`)
    ON DELETE NO ACTION
    ON UPDATE NO ACTION,
  CONSTRAINT `fk_ClientexAlergia_Cliente1`
    FOREIGN KEY (`idCliente`)
    REFERENCES `empresaDeTurismoDB`.`Cliente` (`idCliente`)
    ON DELETE NO ACTION
    ON UPDATE NO ACTION)
ENGINE = InnoDB;


-- -----------------------------------------------------
-- Table `empresaDeTurismoDB`.`Pasaporte`
-- -----------------------------------------------------
DROP TABLE IF EXISTS `empresaDeTurismoDB`.`Pasaporte` ;

CREATE TABLE IF NOT EXISTS `empresaDeTurismoDB`.`Pasaporte` (
  `idPasaporte` INT NOT NULL AUTO_INCREMENT,
  `idCliente` INT NOT NULL,
  `numero` VARCHAR(50) NOT NULL,
  PRIMARY KEY (`idPasaporte`),
  INDEX `fk_Pasaporte_Cliente1_idx` (`idCliente` ASC),
  CONSTRAINT `fk_Pasaporte_Cliente1`
    FOREIGN KEY (`idCliente`)
    REFERENCES `empresaDeTurismoDB`.`Cliente` (`idCliente`)
    ON DELETE NO ACTION
    ON UPDATE NO ACTION)
ENGINE = InnoDB;


-- -----------------------------------------------------
-- Table `empresaDeTurismoDB`.`Especificacion`
-- -----------------------------------------------------
DROP TABLE IF EXISTS `empresaDeTurismoDB`.`Especificacion` ;

CREATE TABLE IF NOT EXISTS `empresaDeTurismoDB`.`Especificacion` (
  `idEspecificacion` INT NOT NULL AUTO_INCREMENT,
  `idCliente` INT NOT NULL,
  `descripcion` VARCHAR(100) NOT NULL,
  PRIMARY KEY (`idEspecificacion`),
  INDEX `fk_Especificacion_Cliente1_idx` (`idCliente` ASC),
  CONSTRAINT `fk_Especificacion_Cliente1`
    FOREIGN KEY (`idCliente`)
    REFERENCES `empresaDeTurismoDB`.`Cliente` (`idCliente`)
    ON DELETE NO ACTION
    ON UPDATE NO ACTION)
ENGINE = InnoDB;


-- -----------------------------------------------------
-- Table `empresaDeTurismoDB`.`CorreoElectronico`
-- -----------------------------------------------------
DROP TABLE IF EXISTS `empresaDeTurismoDB`.`CorreoElectronico` ;

CREATE TABLE IF NOT EXISTS `empresaDeTurismoDB`.`CorreoElectronico` (
  `idCorreoElectronico` INT NOT NULL AUTO_INCREMENT,
  `dirCorreo` VARCHAR(50) NOT NULL,
  PRIMARY KEY (`idCorreoElectronico`))
ENGINE = InnoDB;


-- -----------------------------------------------------
-- Table `empresaDeTurismoDB`.`ClientexCorreoElectronico`
-- -----------------------------------------------------
DROP TABLE IF EXISTS `empresaDeTurismoDB`.`ClientexCorreoElectronico` ;

CREATE TABLE IF NOT EXISTS `empresaDeTurismoDB`.`ClientexCorreoElectronico` (
  `idClientexCorreoElectronico` INT NOT NULL AUTO_INCREMENT,
  `idCliente` INT NOT NULL,
  `idCorreoElectronico` INT NOT NULL,
  PRIMARY KEY (`idClientexCorreoElectronico`),
  INDEX `fk_ClientexCorreoElectronico_CorreoElectronico1_idx` (`idCorreoElectronico` ASC),
  INDEX `fk_ClientexCorreoElectronico_Cliente1_idx` (`idCliente` ASC),
  CONSTRAINT `fk_ClientexCorreoElectronico_CorreoElectronico1`
    FOREIGN KEY (`idCorreoElectronico`)
    REFERENCES `empresaDeTurismoDB`.`CorreoElectronico` (`idCorreoElectronico`)
    ON DELETE NO ACTION
    ON UPDATE NO ACTION,
  CONSTRAINT `fk_ClientexCorreoElectronico_Cliente1`
    FOREIGN KEY (`idCliente`)
    REFERENCES `empresaDeTurismoDB`.`Cliente` (`idCliente`)
    ON DELETE NO ACTION
    ON UPDATE NO ACTION)
ENGINE = InnoDB;


-- -----------------------------------------------------
-- Table `empresaDeTurismoDB`.`HotelxCorreoElectronico`
-- -----------------------------------------------------
DROP TABLE IF EXISTS `empresaDeTurismoDB`.`HotelxCorreoElectronico` ;

CREATE TABLE IF NOT EXISTS `empresaDeTurismoDB`.`HotelxCorreoElectronico` (
  `idHotelxCorreoElectronico` INT NOT NULL AUTO_INCREMENT,
  `idHotel` INT NOT NULL,
  `idCorreoElectronico` INT NOT NULL,
  PRIMARY KEY (`idHotelxCorreoElectronico`),
  INDEX `fk_HotelxCorreoElectronico_Hotel1_idx` (`idHotel` ASC),
  INDEX `fk_HotelxCorreoElectronico_CorreoElectronico1_idx` (`idCorreoElectronico` ASC),
  CONSTRAINT `fk_HotelxCorreoElectronico_Hotel1`
    FOREIGN KEY (`idHotel`)
    REFERENCES `empresaDeTurismoDB`.`Hotel` (`idHotel`)
    ON DELETE NO ACTION
    ON UPDATE NO ACTION,
  CONSTRAINT `fk_HotelxCorreoElectronico_CorreoElectronico1`
    FOREIGN KEY (`idCorreoElectronico`)
    REFERENCES `empresaDeTurismoDB`.`CorreoElectronico` (`idCorreoElectronico`)
    ON DELETE NO ACTION
    ON UPDATE NO ACTION)
ENGINE = InnoDB;


-- -----------------------------------------------------
-- Table `empresaDeTurismoDB`.`SucursalxCorreoElectronico`
-- -----------------------------------------------------
DROP TABLE IF EXISTS `empresaDeTurismoDB`.`SucursalxCorreoElectronico` ;

CREATE TABLE IF NOT EXISTS `empresaDeTurismoDB`.`SucursalxCorreoElectronico` (
  `idSucursalxCorreoElectronico` INT NOT NULL AUTO_INCREMENT,
  `idSucursal` INT NOT NULL,
  `idCorreoElectronico` INT NOT NULL,
  PRIMARY KEY (`idSucursalxCorreoElectronico`),
  INDEX `fk_SucursalxCorreoElectronico_CorreoElectronico1_idx` (`idCorreoElectronico` ASC),
  INDEX `fk_SucursalxCorreoElectronico_Sucursal1_idx` (`idSucursal` ASC),
  CONSTRAINT `fk_SucursalxCorreoElectronico_CorreoElectronico1`
    FOREIGN KEY (`idCorreoElectronico`)
    REFERENCES `empresaDeTurismoDB`.`CorreoElectronico` (`idCorreoElectronico`)
    ON DELETE NO ACTION
    ON UPDATE NO ACTION,
  CONSTRAINT `fk_SucursalxCorreoElectronico_Sucursal1`
    FOREIGN KEY (`idSucursal`)
    REFERENCES `empresaDeTurismoDB`.`Sucursal` (`idSucursal`)
    ON DELETE NO ACTION
    ON UPDATE NO ACTION)
ENGINE = InnoDB;


-- -----------------------------------------------------
-- Table `empresaDeTurismoDB`.`Contacto`
-- -----------------------------------------------------
DROP TABLE IF EXISTS `empresaDeTurismoDB`.`Contacto` ;

CREATE TABLE IF NOT EXISTS `empresaDeTurismoDB`.`Contacto` (
  `idContacto` INT NOT NULL AUTO_INCREMENT,
  `idCliente` INT NOT NULL,
  `idTelefono` INT NOT NULL,
  `nombre` VARCHAR(50) NOT NULL,
  PRIMARY KEY (`idContacto`),
  INDEX `fk_Contacto_Cliente1_idx` (`idCliente` ASC),
  INDEX `fk_Contacto_Telefono1_idx` (`idTelefono` ASC),
  CONSTRAINT `fk_Contacto_Cliente1`
    FOREIGN KEY (`idCliente`)
    REFERENCES `empresaDeTurismoDB`.`Cliente` (`idCliente`)
    ON DELETE NO ACTION
    ON UPDATE NO ACTION,
  CONSTRAINT `fk_Contacto_Telefono1`
    FOREIGN KEY (`idTelefono`)
    REFERENCES `empresaDeTurismoDB`.`Telefono` (`idTelefono`)
    ON DELETE NO ACTION
    ON UPDATE NO ACTION)
ENGINE = InnoDB;


-- -----------------------------------------------------
-- Table `empresaDeTurismoDB`.`EmpleadoxCorreoElectronico`
-- -----------------------------------------------------
DROP TABLE IF EXISTS `empresaDeTurismoDB`.`EmpleadoxCorreoElectronico` ;

CREATE TABLE IF NOT EXISTS `empresaDeTurismoDB`.`EmpleadoxCorreoElectronico` (
  `idEmpleadoxCorreoElectronico` INT NOT NULL AUTO_INCREMENT,
  `idEmpleado` INT NOT NULL,
  `idCorreoElectronico` INT NOT NULL,
  PRIMARY KEY (`idEmpleadoxCorreoElectronico`),
  INDEX `fk_EmpleadoxCorreoElectronico_CorreoElectronico1_idx` (`idCorreoElectronico` ASC),
  INDEX `fk_EmpleadoxCorreoElectronico_Empleado1_idx` (`idEmpleado` ASC),
  CONSTRAINT `fk_EmpleadoxCorreoElectronico_CorreoElectronico1`
    FOREIGN KEY (`idCorreoElectronico`)
    REFERENCES `empresaDeTurismoDB`.`CorreoElectronico` (`idCorreoElectronico`)
    ON DELETE NO ACTION
    ON UPDATE NO ACTION,
  CONSTRAINT `fk_EmpleadoxCorreoElectronico_Empleado1`
    FOREIGN KEY (`idEmpleado`)
    REFERENCES `empresaDeTurismoDB`.`Empleado` (`idEmpleado`)
    ON DELETE NO ACTION
    ON UPDATE NO ACTION)
ENGINE = InnoDB;


-- -----------------------------------------------------
-- Table `empresaDeTurismoDB`.`Pago`
-- -----------------------------------------------------
DROP TABLE IF EXISTS `empresaDeTurismoDB`.`Pago` ;

CREATE TABLE IF NOT EXISTS `empresaDeTurismoDB`.`Pago` (
  `idPago` INT NOT NULL AUTO_INCREMENT,
  `idVenta` INT NOT NULL,
  `monto` DECIMAL(65,2) NOT NULL,
  `fecha` DATE NOT NULL,
  PRIMARY KEY (`idPago`),
  INDEX `fk_Pago_Venta1_idx` (`idVenta` ASC),
  CONSTRAINT `fk_Pago_Venta1`
    FOREIGN KEY (`idVenta`)
    REFERENCES `empresaDeTurismoDB`.`Venta` (`idVenta`)
    ON DELETE NO ACTION
    ON UPDATE NO ACTION)
ENGINE = InnoDB;


-- -----------------------------------------------------
-- Table `empresaDeTurismoDB`.`HabitacionxPaquetexCliente`
-- -----------------------------------------------------
DROP TABLE IF EXISTS `empresaDeTurismoDB`.`HabitacionxPaquetexCliente` ;

CREATE TABLE IF NOT EXISTS `empresaDeTurismoDB`.`HabitacionxPaquetexCliente` (
  `idHabitacionxPaquetexCliente` INT NOT NULL AUTO_INCREMENT,
  `idHabitacion` INT NOT NULL,
  `idPaquete` INT NOT NULL,
  `idCliente` INT NOT NULL,
  PRIMARY KEY (`idHabitacionxPaquetexCliente`),
  INDEX `fk_HabitacionxPaquetexCliente_Habitacion1_idx` (`idHabitacion` ASC),
  INDEX `fk_HabitacionxPaquetexCliente_Paquete1_idx` (`idPaquete` ASC),
  INDEX `fk_HabitacionxPaquetexCliente_Cliente1_idx` (`idCliente` ASC),
  CONSTRAINT `fk_HabitacionxPaquetexCliente_Habitacion1`
    FOREIGN KEY (`idHabitacion`)
    REFERENCES `empresaDeTurismoDB`.`Habitacion` (`idHabitacion`)
    ON DELETE NO ACTION
    ON UPDATE NO ACTION,
  CONSTRAINT `fk_HabitacionxPaquetexCliente_Paquete1`
    FOREIGN KEY (`idPaquete`)
    REFERENCES `empresaDeTurismoDB`.`Paquete` (`idPaquete`)
    ON DELETE NO ACTION
    ON UPDATE NO ACTION,
  CONSTRAINT `fk_HabitacionxPaquetexCliente_Cliente1`
    FOREIGN KEY (`idCliente`)
    REFERENCES `empresaDeTurismoDB`.`Cliente` (`idCliente`)
    ON DELETE NO ACTION
    ON UPDATE NO ACTION)
ENGINE = InnoDB;


-- -----------------------------------------------------
-- Table `empresaDeTurismoDB`.`AsientoxPaquetexCliente`
-- -----------------------------------------------------
DROP TABLE IF EXISTS `empresaDeTurismoDB`.`AsientoxPaquetexCliente` ;

CREATE TABLE IF NOT EXISTS `empresaDeTurismoDB`.`AsientoxPaquetexCliente` (
  `idAsientoxPaquetexCliente` INT NOT NULL AUTO_INCREMENT,
  `idAsiento` INT NOT NULL,
  `idPaquete` INT NOT NULL,
  `idCliente` INT NOT NULL,
  PRIMARY KEY (`idAsientoxPaquetexCliente`),
  INDEX `fk_AsientoxPaquetexCliente_Asiento1_idx` (`idAsiento` ASC),
  INDEX `fk_AsientoxPaquetexCliente_Paquete1_idx` (`idPaquete` ASC),
  INDEX `fk_AsientoxPaquetexCliente_Cliente1_idx` (`idCliente` ASC),
  CONSTRAINT `fk_AsientoxPaquetexCliente_Asiento1`
    FOREIGN KEY (`idAsiento`)
    REFERENCES `empresaDeTurismoDB`.`Asiento` (`idAsiento`)
    ON DELETE NO ACTION
    ON UPDATE NO ACTION,
  CONSTRAINT `fk_AsientoxPaquetexCliente_Paquete1`
    FOREIGN KEY (`idPaquete`)
    REFERENCES `empresaDeTurismoDB`.`Paquete` (`idPaquete`)
    ON DELETE NO ACTION
    ON UPDATE NO ACTION,
  CONSTRAINT `fk_AsientoxPaquetexCliente_Cliente1`
    FOREIGN KEY (`idCliente`)
    REFERENCES `empresaDeTurismoDB`.`Cliente` (`idCliente`)
    ON DELETE NO ACTION
    ON UPDATE NO ACTION)
ENGINE = InnoDB;


-- -----------------------------------------------------
-- Table `empresaDeTurismoDB`.`LugarxPaquetexCliente`
-- -----------------------------------------------------
DROP TABLE IF EXISTS `empresaDeTurismoDB`.`LugarxPaquetexCliente` ;

CREATE TABLE IF NOT EXISTS `empresaDeTurismoDB`.`LugarxPaquetexCliente` (
  `idLugarxPaquetexCliente` INT NOT NULL AUTO_INCREMENT,
  `idLugar` INT NOT NULL,
  `idPaquete` INT NOT NULL,
  `idCliente` INT NOT NULL,
  PRIMARY KEY (`idLugarxPaquetexCliente`),
  INDEX `fk_LugarxPaquetexCliente_Lugar1_idx` (`idLugar` ASC),
  INDEX `fk_LugarxPaquetexCliente_Paquete1_idx` (`idPaquete` ASC),
  INDEX `fk_LugarxPaquetexCliente_Cliente1_idx` (`idCliente` ASC),
  CONSTRAINT `fk_LugarxPaquetexCliente_Lugar1`
    FOREIGN KEY (`idLugar`)
    REFERENCES `empresaDeTurismoDB`.`Lugar` (`idLugar`)
    ON DELETE NO ACTION
    ON UPDATE NO ACTION,
  CONSTRAINT `fk_LugarxPaquetexCliente_Paquete1`
    FOREIGN KEY (`idPaquete`)
    REFERENCES `empresaDeTurismoDB`.`Paquete` (`idPaquete`)
    ON DELETE NO ACTION
    ON UPDATE NO ACTION,
  CONSTRAINT `fk_LugarxPaquetexCliente_Cliente1`
    FOREIGN KEY (`idCliente`)
    REFERENCES `empresaDeTurismoDB`.`Cliente` (`idCliente`)
    ON DELETE NO ACTION
    ON UPDATE NO ACTION)
ENGINE = InnoDB;


-- -----------------------------------------------------
-- Table `empresaDeTurismoDB`.`ComisionxVenta`
-- -----------------------------------------------------
DROP TABLE IF EXISTS `empresaDeTurismoDB`.`ComisionxVenta` ;

CREATE TABLE IF NOT EXISTS `empresaDeTurismoDB`.`ComisionxVenta` (
  `idComisionxVenta` INT NOT NULL AUTO_INCREMENT,
  `idEmpleado` INT NOT NULL,
  `idVenta` INT NOT NULL,
  `monto` DECIMAL(65,2) NOT NULL,
  `fecha` INT NOT NULL,
  PRIMARY KEY (`idComisionxVenta`),
  INDEX `fk_ComisionxVenta_Empleado1_idx` (`idEmpleado` ASC),
  INDEX `fk_ComisionxVenta_Venta1_idx` (`idVenta` ASC),
  CONSTRAINT `fk_ComisionxVenta_Empleado1`
    FOREIGN KEY (`idEmpleado`)
    REFERENCES `empresaDeTurismoDB`.`Empleado` (`idEmpleado`)
    ON DELETE NO ACTION
    ON UPDATE NO ACTION,
  CONSTRAINT `fk_ComisionxVenta_Venta1`
    FOREIGN KEY (`idVenta`)
    REFERENCES `empresaDeTurismoDB`.`Venta` (`idVenta`)
    ON DELETE NO ACTION
    ON UPDATE NO ACTION)
ENGINE = InnoDB;

USE `empresaDeTurismoDB` ;

-- -----------------------------------------------------
-- procedure SP_INSERTAR_DIRECCIONES
-- -----------------------------------------------------

USE `empresaDeTurismoDB`;
DROP procedure IF EXISTS `empresaDeTurismoDB`.`SP_INSERTAR_DIRECCIONES`;

DELIMITER $$
USE `empresaDeTurismoDB`$$
CREATE PROCEDURE SP_INSERTAR_DIRECCIONES(IN cantidadRegistros INT)
BEGIN
DECLARE indexCiudad INT;
SET indexCiudad = 0;

WHILE indexCiudad < cantidadRegistros DO
SET indexCiudad = indexCiudad + 1;
Insert INTO Direccion(idCiudad) VALUES ((SELECT idCiudad FROM Ciudad ORDER BY RAND() LIMIT 1));
END WHILE;

END$$

DELIMITER ;

-- -----------------------------------------------------
-- procedure SP_INSERTAR_PUESTOS
-- -----------------------------------------------------

USE `empresaDeTurismoDB`;
DROP procedure IF EXISTS `empresaDeTurismoDB`.`SP_INSERTAR_PUESTOS`;

DELIMITER $$
USE `empresaDeTurismoDB`$$
CREATE PROCEDURE SP_INSERTAR_PUESTOS(IN cantidadRegistros INT)
BEGIN
DECLARE indexRegistro INT;
SET indexRegistro = 0;

WHILE indexRegistro < cantidadRegistros DO
SET indexRegistro = indexRegistro + 1;
Insert INTO Puesto(idTipoPuesto,hrsLaborarxDia,porcentajeComision,salario) VALUES 
(
(SELECT idTipoPuesto from TipoPuesto ORDER BY RAND() LIMIT 1),
(SELECT FLOOR(6 + RAND() * ((8 - 6) + 1))),
(SELECT FLOOR(1 + RAND() * ((10 - 1) + 1))),
(SELECT FLOOR(1000 + RAND() * ((10000 - 1000) + 1)))
);
END WHILE;
END$$

DELIMITER ;

-- -----------------------------------------------------
-- procedure SP_INSERTAR_SUCURSALES
-- -----------------------------------------------------

USE `empresaDeTurismoDB`;
DROP procedure IF EXISTS `empresaDeTurismoDB`.`SP_INSERTAR_SUCURSALES`;

DELIMITER $$
USE `empresaDeTurismoDB`$$
CREATE PROCEDURE SP_INSERTAR_SUCURSALES(IN cantidadRegistros INT)
BEGIN

DECLARE indexRegistro INT;
DECLARE ultimoIdInsertado INT;
DECLARE cantidadPropagacion INT;
DECLARE indexPropagacion INT;


DECLARE nombreRandom VARCHAR(50);
DECLARE carneRandom VARCHAR(50);


SET cantidadPropagacion = 1; #Cantidad de Telefonos, Correos electronicos por Cliente ....
set indexPropagacion = 0;
SET indexRegistro = 0;

WHILE indexRegistro < cantidadRegistros DO
SET indexRegistro = indexRegistro + 1;


SET nombreRandom = (SELECT nombre from ListaNombres ORDER BY RAND() LIMIT 1);
#SET carneRandom = (SELECT SUBSTRING(nombreRandom, 1, 1));
#SET carneRandom = CONCAT( carneRandom , CONVERT((
#                             SELECT (FLOOR(1 + RAND() * ((1000000 - 1) + 1) ))
                            
#                            ),char(49)));

INSERT INTO Sucursal(idEmpresa,idDireccion,nombre) VALUES
((SELECT idEmpresa from Empresa ORDER BY RAND() LIMIT 1),
 (SELECT idDireccion from Direccion ORDER BY RAND() LIMIT 1),
 #carneRandom
   CONVERT(
    (SELECT AUTO_INCREMENT FROM information_schema.TABLES
    WHERE TABLE_SCHEMA = 'empresaDeTurismoDB' 
	AND TABLE_NAME = 'Sucursal')
     ,CHAR(50))
);

SET ultimoIdInsertado = LAST_INSERT_ID();



Insert INTO Paquete(idSucursal,cantidadDisponible,fechaTour,precio,capacidadPersonas,nombre) VALUES 
(
   ultimoIdInsertado,
   (SELECT FLOOR(10 + RAND() * ((20 - 10) + 1))),
   (SELECT DATE_ADD((SELECT CURDATE()),INTERVAL 31 DAY)),
   (SELECT FLOOR(500 + RAND() * ((10000 - 500) + 1))),
   (SELECT FLOOR(1 + RAND() * ((3 - 1) + 1))),
   #carneRandom
     CONVERT(
    (SELECT AUTO_INCREMENT FROM information_schema.TABLES
    WHERE TABLE_SCHEMA = 'empresaDeTurismoDB' 
	AND TABLE_NAME = 'Paquete')
     ,CHAR(50))
    );

Insert INTO Paquete(idSucursal,cantidadDisponible,fechaTour,precio,capacidadPersonas,nombre) VALUES 
(
   ultimoIdInsertado,
   (SELECT FLOOR(10 + RAND() * ((20 - 10) + 1))),
   (SELECT DATE_ADD((SELECT CURDATE()),INTERVAL 31 DAY)),
   (SELECT FLOOR(500 + RAND() * ((10000 - 500) + 1))),
   (SELECT FLOOR(1 + RAND() * ((3 - 1) + 1))),
   #carneRandom
     CONVERT(
    (SELECT AUTO_INCREMENT FROM information_schema.TABLES
    WHERE TABLE_SCHEMA = 'empresaDeTurismoDB' 
	AND TABLE_NAME = 'Paquete')
     ,CHAR(50))
    );
    
    Insert INTO Paquete(idSucursal,cantidadDisponible,fechaTour,precio,capacidadPersonas,nombre) VALUES 
(
   ultimoIdInsertado,
   (SELECT FLOOR(10 + RAND() * ((20 - 10) + 1))),
   (SELECT DATE_ADD((SELECT CURDATE()),INTERVAL 31 DAY)),
   (SELECT FLOOR(500 + RAND() * ((10000 - 500) + 1))),
   (SELECT FLOOR(1 + RAND() * ((3 - 1) + 1))),
   #carneRandom
     CONVERT(
    (SELECT AUTO_INCREMENT FROM information_schema.TABLES
    WHERE TABLE_SCHEMA = 'empresaDeTurismoDB' 
	AND TABLE_NAME = 'Paquete')
     ,CHAR(50))
    );
    
    Insert INTO Paquete(idSucursal,cantidadDisponible,fechaTour,precio,capacidadPersonas,nombre) VALUES 
(
   ultimoIdInsertado,
   (SELECT FLOOR(10 + RAND() * ((20 - 10) + 1))),
   (SELECT DATE_ADD((SELECT CURDATE()),INTERVAL 31 DAY)),
   (SELECT FLOOR(500 + RAND() * ((10000 - 500) + 1))),
   (SELECT FLOOR(1 + RAND() * ((3 - 1) + 1))),
   #carneRandom
     CONVERT(
    (SELECT AUTO_INCREMENT FROM information_schema.TABLES
    WHERE TABLE_SCHEMA = 'empresaDeTurismoDB' 
	AND TABLE_NAME = 'Paquete')
     ,CHAR(50))
    );
    
    
    Insert INTO Paquete(idSucursal,cantidadDisponible,fechaTour,precio,capacidadPersonas,nombre) VALUES 
(
   ultimoIdInsertado,
   (SELECT FLOOR(10 + RAND() * ((20 - 10) + 1))),
   (SELECT DATE_ADD((SELECT CURDATE()),INTERVAL 31 DAY)),
   (SELECT FLOOR(500 + RAND() * ((10000 - 500) + 1))),
   (SELECT FLOOR(1 + RAND() * ((3 - 1) + 1))),
   #carneRandom
     CONVERT(
    (SELECT AUTO_INCREMENT FROM information_schema.TABLES
    WHERE TABLE_SCHEMA = 'empresaDeTurismoDB' 
	AND TABLE_NAME = 'Paquete')
     ,CHAR(50))
    );

SET nombreRandom = (SELECT nombre from ListaNombres ORDER BY RAND() LIMIT 1);
#SET carneRandom = (SELECT SUBSTRING(nombreRandom, 1, 1));
#SET carneRandom = CONCAT( carneRandom , CONVERT((
#                             SELECT (FLOOR(1 + RAND() * ((1000000 - 1) + 1) ))
                            
#                            ),char(49)));

INSERT INTO Empleado(idSucursal,nombre,idPuesto,administradorFlag,carne)
VALUES 
(ultimoIdInsertado,
nombreRandom,
(Select idPuesto from Puesto inner join TipoPuesto on 
Puesto.idTipoPuesto = TipoPuesto.idTipoPuesto
where TipoPuesto.nombre = "Gerente" limit 1),
1,
#carneRandom
  CONVERT(
    (SELECT AUTO_INCREMENT FROM information_schema.TABLES
    WHERE TABLE_SCHEMA = 'empresaDeTurismoDB' 
	AND TABLE_NAME = 'Empleado')
     ,CHAR(50))

);

SET nombreRandom = (SELECT nombre from ListaNombres ORDER BY RAND() LIMIT 1);
#SET carneRandom = (SELECT SUBSTRING(nombreRandom, 1, 1));
#SET carneRandom = CONCAT( carneRandom , CONVERT((
#                             SELECT (FLOOR(1 + RAND() * ((1000000 - 1) + 1) ))
                            
#                            ),char(49)));

INSERT INTO Empleado(idSucursal,nombre,idPuesto,administradorFlag,carne)
VALUES 
(ultimoIdInsertado,
nombreRandom,
(Select idPuesto from Puesto inner join TipoPuesto on 
Puesto.idTipoPuesto = TipoPuesto.idTipoPuesto
where TipoPuesto.nombre = "Vendedor" limit 1),
0,
#carneRandom
  CONVERT(
    (SELECT AUTO_INCREMENT FROM information_schema.TABLES
    WHERE TABLE_SCHEMA = 'empresaDeTurismoDB' 
	AND TABLE_NAME = 'Empleado')
     ,CHAR(50))
);


SET nombreRandom = (SELECT nombre from ListaNombres ORDER BY RAND() LIMIT 1);
#SET carneRandom = (SELECT SUBSTRING(nombreRandom, 1, 1));
#SET carneRandom = CONCAT( carneRandom , CONVERT((
#                             SELECT (FLOOR(1 + RAND() * ((1000000 - 1) + 1) ))
                            
#                            ),char(49)));

INSERT INTO Empleado(idSucursal,nombre,idPuesto,administradorFlag,carne)
VALUES 
(ultimoIdInsertado,
nombreRandom,
(Select idPuesto from Puesto inner join TipoPuesto on 
Puesto.idTipoPuesto = TipoPuesto.idTipoPuesto
where TipoPuesto.nombre = "Vendedor" limit 1),
0,
#carneRandom
  CONVERT(
    (SELECT AUTO_INCREMENT FROM information_schema.TABLES
    WHERE TABLE_SCHEMA = 'empresaDeTurismoDB' 
	AND TABLE_NAME = 'Empleado')
     ,CHAR(50))
);

SET nombreRandom = (SELECT nombre from ListaNombres ORDER BY RAND() LIMIT 1);
#SET carneRandom = (SELECT SUBSTRING(nombreRandom, 1, 1));
#SET carneRandom = CONCAT( carneRandom , CONVERT((
#                             SELECT (FLOOR(1 + RAND() * ((1000000 - 1) + 1) ))
                            
#                            ),char(49)));

INSERT INTO Empleado(idSucursal,nombre,idPuesto,administradorFlag,carne)
VALUES 
(ultimoIdInsertado,
nombreRandom,
(Select idPuesto from Puesto inner join TipoPuesto on 
Puesto.idTipoPuesto = TipoPuesto.idTipoPuesto
where TipoPuesto.nombre = "Vendedor" limit 1),
0,
#carneRandom
  CONVERT(
    (SELECT AUTO_INCREMENT FROM information_schema.TABLES
    WHERE TABLE_SCHEMA = 'empresaDeTurismoDB' 
	AND TABLE_NAME = 'Empleado')
     ,CHAR(50))
);

SET nombreRandom = (SELECT nombre from ListaNombres ORDER BY RAND() LIMIT 1);
#SET carneRandom = (SELECT SUBSTRING(nombreRandom, 1, 1));
#SET carneRandom = CONCAT( carneRandom , CONVERT((
#                             SELECT (FLOOR(1 + RAND() * ((1000000 - 1) + 1) ))
                            
#                            ),char(49)));

INSERT INTO Empleado(idSucursal,nombre,idPuesto,administradorFlag,carne)
VALUES 
(ultimoIdInsertado,
nombreRandom,
(Select idPuesto from Puesto inner join TipoPuesto on 
Puesto.idTipoPuesto = TipoPuesto.idTipoPuesto
where TipoPuesto.nombre = "Secretaria" limit 1),
0,
#carneRandom
  CONVERT(
    (SELECT AUTO_INCREMENT FROM information_schema.TABLES
    WHERE TABLE_SCHEMA = 'empresaDeTurismoDB' 
	AND TABLE_NAME = 'Empleado')
     ,CHAR(50))
);

SET nombreRandom = (SELECT nombre from ListaNombres ORDER BY RAND() LIMIT 1);
#SET carneRandom = (SELECT SUBSTRING(nombreRandom, 1, 1));
#SET carneRandom = CONCAT( carneRandom , CONVERT((
#                             SELECT (FLOOR(1 + RAND() * ((1000000 - 1) + 1) ))
                            
#                            ),char(49)));

INSERT INTO Empleado(idSucursal,nombre,idPuesto,administradorFlag,carne)
VALUES 
(ultimoIdInsertado,
nombreRandom,
(Select idPuesto from Puesto inner join TipoPuesto on 
Puesto.idTipoPuesto = TipoPuesto.idTipoPuesto
where TipoPuesto.nombre = "Conserje" limit 1),
0,
  CONVERT(
    (SELECT AUTO_INCREMENT FROM information_schema.TABLES
    WHERE TABLE_SCHEMA = 'empresaDeTurismoDB' 
	AND TABLE_NAME = 'Empleado')
     ,CHAR(50))
);

#Se le asignan telefonos a la sucursal
WHILE indexPropagacion < cantidadPropagacion DO
SET indexPropagacion = indexPropagacion + 1;
INSERT INTO SucursalxTelefono(idSucursal,idTelefono) VALUES
(ultimoIdInsertado,
(SELECT idTelefono from Telefono ORDER BY RAND() LIMIT 1));
END WHILE;
SET indexPropagacion = 0;

#se le asignan correos electronicos a la sucursal
WHILE indexPropagacion < cantidadPropagacion DO
SET indexPropagacion = indexPropagacion + 1;
INSERT INTO SucursalxCorreoElectronico(idSucursal,idCorreoElectronico) VALUES
(ultimoIdInsertado,
(SELECT idCorreoElectronico from CorreoElectronico ORDER BY RAND() LIMIT 1));
END WHILE;
SET indexPropagacion = 0;

END WHILE;
END$$

DELIMITER ;

-- -----------------------------------------------------
-- procedure SP_INSERTAR_PLANILLAS
-- -----------------------------------------------------

USE `empresaDeTurismoDB`;
DROP procedure IF EXISTS `empresaDeTurismoDB`.`SP_INSERTAR_PLANILLAS`;

DELIMITER $$
USE `empresaDeTurismoDB`$$
CREATE PROCEDURE `SP_INSERTAR_PLANILLAS` (IN cantidadRegistros INT)
BEGIN
DECLARE indexRegistro INT;
SET indexRegistro = 0;

WHILE indexRegistro < cantidadRegistros DO
SET indexRegistro = indexRegistro + 1;
Insert INTO Planilla(idSucursal) VALUES 
((SELECT idSucursal from Sucursal ORDER BY RAND() LIMIT 1));
END WHILE;
END
$$

DELIMITER ;

-- -----------------------------------------------------
-- procedure SP_INSERTAR_EMPLEADOS
-- -----------------------------------------------------

USE `empresaDeTurismoDB`;
DROP procedure IF EXISTS `empresaDeTurismoDB`.`SP_INSERTAR_EMPLEADOS`;

DELIMITER $$
USE `empresaDeTurismoDB`$$
CREATE PROCEDURE `SP_INSERTAR_EMPLEADOS` (IN cantidadRegistros INT)
BEGIN
DECLARE indexRegistro INT;
DECLARE ultimoIdInsertado INT;
DECLARE cantidadPropagacion INT;
DECLARE indexPropagacion INT;
DECLARE nombreRandom VARCHAR(50);
DECLARE carneRandom VARCHAR(50);

SET cantidadPropagacion = 1; #Cantidad de Telefonos, Correos electronicos por Empleados ....
set indexPropagacion = 0;
SET indexRegistro = 0;

WHILE indexRegistro < cantidadRegistros DO
SET indexRegistro = indexRegistro + 1;
SET nombreRandom = (SELECT nombre from ListaNombres ORDER BY RAND() LIMIT 1);

#SET carneRandom = (SELECT SUBSTRING(nombreRandom, 1, 1));
#SET carneRandom = CONCAT( carneRandom , CONVERT((
#                             SELECT (FLOOR(1 + RAND() * ((1000000 - 1) + 1) ))                            
#                            ),char(49)));

Insert INTO Empleado(idSucursal,nombre,idPuesto,administradorFlag,carne) VALUES 
( (SELECT idSucursal from Sucursal ORDER BY RAND() LIMIT 1),
   nombreRandom,
    (SELECT idPuesto from Puesto ORDER BY RAND() LIMIT 1),
    0,
    #carneRandom
    CONVERT(
    (SELECT AUTO_INCREMENT FROM information_schema.TABLES
    WHERE TABLE_SCHEMA = 'empresaDeTurismoDB' 
	AND TABLE_NAME = 'Empleado')
     ,CHAR(50))
     );
    
SET ultimoIdInsertado = LAST_INSERT_ID();

#Se le asigna al empleado direcciones
WHILE indexPropagacion < cantidadPropagacion DO
SET indexPropagacion = indexPropagacion + 1;
INSERT INTO EmpleadoxDireccion(idEmpleado,idDireccion)VALUES
(ultimoIdInsertado,
(SELECT idDireccion from Direccion ORDER BY RAND() LIMIT 1));
END WHILE;

SET indexPropagacion = 0;

#Se asocial al empleado con numeros de telefono
WHILE indexPropagacion < cantidadPropagacion DO
SET indexPropagacion = indexPropagacion + 1;
INSERT INTO EmpleadoxTelefono(idEmpleado,idTelefono) VALUES
(ultimoIdInsertado,
(SELECT idTelefono from Telefono ORDER BY RAND() LIMIT 1));
END WHILE;
SET indexPropagacion = 0;

#Se asocia al empleado con correos electronicos
WHILE indexPropagacion < cantidadPropagacion DO
SET indexPropagacion = indexPropagacion + 1;
INSERT INTO EmpleadoxCorreoElectronico(idEmpleado,idCorreoElectronico) VALUES
(ultimoIdInsertado,
(SELECT idCorreoElectronico from CorreoElectronico ORDER BY RAND() LIMIT 1));
END WHILE;
SET indexPropagacion = 0;
    
    
END WHILE;

END
$$

DELIMITER ;

-- -----------------------------------------------------
-- procedure SP_INSERTAR_CLIENTES
-- -----------------------------------------------------

USE `empresaDeTurismoDB`;
DROP procedure IF EXISTS `empresaDeTurismoDB`.`SP_INSERTAR_CLIENTES`;

DELIMITER $$
USE `empresaDeTurismoDB`$$
CREATE PROCEDURE `SP_INSERTAR_CLIENTES` (IN cantidadRegistros INT)
BEGIN
DECLARE indexRegistro INT;
DECLARE ultimoIdInsertado INT;
DECLARE cantidadPropagacion INT;
DECLARE indexPropagacion INT;

DECLARE nombreRandom VARCHAR(50);
DECLARE carneRandom VARCHAR(50);

SET cantidadPropagacion = 1; #Cantidad de Telefonos, Correos electronicos por Cliente ....
set indexPropagacion = 0;
SET indexRegistro = 0;

WHILE indexRegistro < cantidadRegistros DO
SET indexRegistro = indexRegistro + 1;


SET nombreRandom = (SELECT nombre from ListaNombres ORDER BY RAND() LIMIT 1);
#SET carneRandom = (SELECT SUBSTRING(nombreRandom, 1, 1));
#SET carneRandom = CONCAT( carneRandom , CONVERT((
#                             SELECT (FLOOR(1 + RAND() * ((1000000 - 1) + 1) ))
                            
#                            ),char(49)));
                            
Insert INTO Cliente(nombre,cedula) VALUES 
(
nombreRandom,
  CONVERT(
    (SELECT AUTO_INCREMENT FROM information_schema.TABLES
    WHERE TABLE_SCHEMA = 'empresaDeTurismoDB' 
	AND TABLE_NAME = 'Cliente')
     ,CHAR(50))

);

SET ultimoIdInsertado = LAST_INSERT_ID();

#Se le asigna al cliente direcciones
WHILE indexPropagacion < cantidadPropagacion DO
SET indexPropagacion = indexPropagacion + 1;
INSERT INTO ClientexDireccion(idCliente,idDireccion)VALUES
(ultimoIdInsertado,
(SELECT idDireccion from Direccion ORDER BY RAND() LIMIT 1)
);
END WHILE;

SET indexPropagacion = 0;

#Se asocial al cliente con numeros de telefono
WHILE indexPropagacion < cantidadPropagacion DO
SET indexPropagacion = indexPropagacion + 1;
INSERT INTO ClientexTelefono(idCliente,idTelefono) VALUES
(ultimoIdInsertado,
(SELECT idTelefono from Telefono ORDER BY RAND() LIMIT 1)
);
END WHILE;
SET indexPropagacion = 0;

#Se asocia al cliente con correos electronicos

WHILE indexPropagacion < cantidadPropagacion DO
SET indexPropagacion = indexPropagacion + 1;
INSERT INTO ClientexCorreoElectronico(idCliente,idCorreoElectronico) VALUES
(ultimoIdInsertado,
(SELECT idCorreoElectronico from CorreoElectronico ORDER BY RAND() LIMIT 1)
);
END WHILE;
SET indexPropagacion = 0;

 #Se asocia al cliente una alergia
 WHILE indexPropagacion < cantidadPropagacion DO
 SET indexPropagacion = indexPropagacion + 1;
 INSERT INTO ClientexAlergia(idCliente,idAlergia) values
 (ultimoIdInsertado,
 (SELECT idAlergia from Alergia ORDER BY RAND() LIMIT 1)
 );
END WHILE;
SET indexPropagacion = 0;

 #Se asocia al cliente un pasaporte
 WHILE indexPropagacion < cantidadPropagacion DO
 SET indexPropagacion = indexPropagacion + 1;
 INSERT INTO Pasaporte(numero,idCliente) values
 (
 (SELECT numero from ListaPasaportes ORDER BY RAND() LIMIT 1),
 ultimoIdInsertado
 );
END WHILE;
SET indexPropagacion = 0;

 #Se asocia al cliente especificacion
 WHILE indexPropagacion < cantidadPropagacion DO
 SET indexPropagacion = indexPropagacion + 1;
 INSERT INTO Especificacion(descripcion,idCliente) values
 (
 (SELECT descripcion from ListaDescripciones ORDER BY RAND() LIMIT 1),
 ultimoIdInsertado
 );
END WHILE;
SET indexPropagacion = 0;

 #Se asocia al cliente contactos
 WHILE indexPropagacion < cantidadPropagacion DO
 SET indexPropagacion = indexPropagacion + 1;
 INSERT INTO Contacto(idCliente,nombre,idTelefono) values
 (
 ultimoIdInsertado,
 (SELECT nombre from ListaNombres ORDER BY RAND() LIMIT 1),
 (SELECT idTelefono from Telefono ORDER BY RAND() LIMIT 1)
 );
END WHILE;
SET indexPropagacion = 0;

END WHILE;



END
$$

DELIMITER ;

-- -----------------------------------------------------
-- procedure SP_INSERTAR_HOTELES
-- -----------------------------------------------------

USE `empresaDeTurismoDB`;
DROP procedure IF EXISTS `empresaDeTurismoDB`.`SP_INSERTAR_HOTELES`;

DELIMITER $$
USE `empresaDeTurismoDB`$$
CREATE PROCEDURE `SP_INSERTAR_HOTELES` (IN cantidadRegistros INT)
BEGIN
DECLARE indexRegistro INT;
DECLARE ultimoIdInsertado INT;
DECLARE cantidadPropagacion INT;
DECLARE indexPropagacion INT;
DECLARE indexHabitacion INT;
DECLARE cantidadHabitacion INT;

SET cantidadPropagacion = 1; #Cantidad de Telefonos, Correos electronicos por Cliente ....
set indexPropagacion = 0;
set indexRegistro = 0;

set cantidadHabitacion = 20;
set indexHabitacion = 0;


WHILE indexRegistro < cantidadRegistros DO
SET indexRegistro = indexRegistro + 1;
Insert INTO Hotel(nombre,idDireccion) VALUES 
(
   (SELECT nombre from ListaEmpresas ORDER BY RAND() LIMIT 1),
   (SELECT idDireccion from Direccion ORDER BY RAND() LIMIT 1)
    );
    
SET ultimoIdInsertado = LAST_INSERT_ID();

#Se asocial al empleado con numeros de telefono
WHILE indexPropagacion < cantidadPropagacion DO
SET indexPropagacion = indexPropagacion + 1;
INSERT INTO HotelxTelefono(idHotel,idTelefono) VALUES
(ultimoIdInsertado,
(SELECT idTelefono from Telefono ORDER BY RAND() LIMIT 1));
END WHILE;
SET indexPropagacion = 0;

#Se asocia al empleado con correos electronicos
WHILE indexPropagacion < cantidadPropagacion DO
SET indexPropagacion = indexPropagacion + 1;
INSERT INTO HotelxCorreoElectronico(idHotel,idCorreoElectronico) VALUES
(ultimoIdInsertado,
(SELECT idCorreoElectronico from CorreoElectronico ORDER BY RAND() LIMIT 1));
END WHILE;
SET indexPropagacion = 0;

#Se asocian 100 habitaciones al hotel
WHILE indexHabitacion < cantidadHabitacion DO
set indexHabitacion = indexHabitacion + 1;
INSERT INTO Habitacion(numero,idHotel)
VALUES (indexHabitacion,ultimoIdInsertado);
END WHILE;
SET indexHabitacion = 0;

END WHILE;
END
$$

DELIMITER ;

-- -----------------------------------------------------
-- procedure SP_INSERTAR_LUGARES
-- -----------------------------------------------------

USE `empresaDeTurismoDB`;
DROP procedure IF EXISTS `empresaDeTurismoDB`.`SP_INSERTAR_LUGARES`;

DELIMITER $$
USE `empresaDeTurismoDB`$$
CREATE PROCEDURE `SP_INSERTAR_LUGARES` (IN cantidadRegistros INT)
BEGIN
DECLARE indexRegistro INT;
DECLARE indexPropagacion INT;

set indexPropagacion = 0;
set indexRegistro = 0;

WHILE indexRegistro < cantidadRegistros DO
SET indexRegistro = indexRegistro + 1;
Insert INTO Lugar(nombre,idDireccion) VALUES 
(
   (SELECT nombre from ListaLugares ORDER BY RAND() LIMIT 1),
   (SELECT idDireccion from Direccion ORDER BY RAND() LIMIT 1)
    );
    
END WHILE;
END
$$

DELIMITER ;

-- -----------------------------------------------------
-- procedure SP_INSERTAR_TRANSPORTES
-- -----------------------------------------------------

USE `empresaDeTurismoDB`;
DROP procedure IF EXISTS `empresaDeTurismoDB`.`SP_INSERTAR_TRANSPORTES`;

DELIMITER $$
USE `empresaDeTurismoDB`$$
CREATE PROCEDURE `SP_INSERTAR_TRANSPORTES` (IN cantidadRegistros INT)
BEGIN
DECLARE indexRegistro INT;
DECLARE ultimoIdInsertado INT;
DECLARE indexAsiento INT;
DECLARE cantidadAsiento INT;

set cantidadAsiento = 10;
set indexAsiento = 0;
set indexRegistro = 0;

WHILE indexRegistro < cantidadRegistros DO
SET indexRegistro = indexRegistro + 1;
Insert INTO Transporte(fechaSalida,fechaLLegada,idLugarSalida,idLugarLLegada,idTipoTransporte) VALUES 
(
   (SELECT DATE_ADD((SELECT CURDATE()),INTERVAL 30 DAY)),
   (SELECT DATE_ADD((SELECT CURDATE()),INTERVAL 31 DAY)),
   (SELECT idLugar from Lugar ORDER BY RAND() LIMIT 1),
   (SELECT idLugar from Lugar ORDER BY RAND() LIMIT 1),
   (SELECT idTipoTransporte from TipoTransporte ORDER BY RAND() LIMIT 1));
    
SET ultimoIdInsertado = LAST_INSERT_ID();

WHILE indexAsiento < cantidadAsiento DO
set indexAsiento = indexAsiento + 1;
INSERT INTO Asiento(numero,idTransporte)
VALUES (indexAsiento,ultimoIdInsertado);
END WHILE;
SET indexAsiento = 0;


END WHILE;

END
$$

DELIMITER ;

-- -----------------------------------------------------
-- procedure SP_INSERTAR_PAQUETES
-- -----------------------------------------------------

USE `empresaDeTurismoDB`;
DROP procedure IF EXISTS `empresaDeTurismoDB`.`SP_INSERTAR_PAQUETES`;

DELIMITER $$
USE `empresaDeTurismoDB`$$
CREATE PROCEDURE `SP_INSERTAR_PAQUETES` (IN cantidadRegistros INT)
BEGIN
DECLARE indexRegistro INT;
DECLARE ultimoIdInsertado INT;
DECLARE cantidadPropagacion INT;
DECLARE indexPropagacion INT;

DECLARE nombreRandom VARCHAR(50);
DECLARE carneRandom VARCHAR(50);

SET cantidadPropagacion = (SELECT FLOOR(1 +   RAND() * ((3     -  1 ) + 1))); #Cantidad de personas, asientos habitaciones
set indexPropagacion = 0;
set indexRegistro = 0;

WHILE indexRegistro < cantidadRegistros DO
SET indexRegistro = indexRegistro + 1;

#SET nombreRandom = (SELECT nombre from ListaNombres ORDER BY RAND() LIMIT 1);
#SET carneRandom = (SELECT SUBSTRING(nombreRandom, 1, 1));
#SET carneRandom = CONCAT( carneRandom , CONVERT((
#                             SELECT (FLOOR(1 + RAND() * ((1000000 - 1) + 1) ))
                            
#                            ),char(49)));

Insert INTO Paquete(idSucursal,cantidadDisponible,fechaTour,precio,capacidadPersonas,nombre) VALUES 
(
   (SELECT idSucursal from Sucursal ORDER BY RAND() LIMIT 1),
   (SELECT FLOOR(10 + RAND() * ((20 - 10) + 1))),
   (SELECT DATE_ADD((SELECT CURDATE()),INTERVAL 31 DAY)),
   (SELECT FLOOR(500 + RAND() * ((10000 - 500) + 1))),
   (SELECT FLOOR(1 + RAND() * ((3 - 1) + 1))),
   #carneRandom
     CONVERT(
    (SELECT AUTO_INCREMENT FROM information_schema.TABLES
    WHERE TABLE_SCHEMA = 'empresaDeTurismoDB' 
	AND TABLE_NAME = 'Paquete')
     ,CHAR(50))
    );
    
SET ultimoIdInsertado = LAST_INSERT_ID();
/*
INSERT INTO Itinerario(idPaquete) values (ultimoIdInsertado);

SET ultimoIdInsertado = LAST_INSERT_ID();

WHILE indexPropagacion < cantidadPropagacion DO
SET indexPropagacion = indexPropagacion + 1;
INSERT INTO LugarxItinerario(idLugar,idItinerario) VALUES
(
(SELECT idLugar from Lugar ORDER BY RAND() LIMIT 1),
ultimoIdInsertado
);
END WHILE;
SET indexPropagacion = 0;

WHILE indexPropagacion < cantidadPropagacion DO
SET indexPropagacion = indexPropagacion + 1;
INSERT INTO ItinerarioxAsiento(idAsiento,idItinerario) VALUES
(
(SELECT idAsiento from Asiento ORDER BY RAND() LIMIT 1),
ultimoIdInsertado
);
END WHILE;
SET indexPropagacion = 0;

WHILE indexPropagacion < cantidadPropagacion DO
SET indexPropagacion = indexPropagacion + 1;
INSERT INTO ItinerarioxHabitacion(idHabitacion,idItinerario) VALUES
(
(SELECT idHabitacion from Habitacion ORDER BY RAND() LIMIT 1),
ultimoIdInsertado
);
END WHILE;
SET indexPropagacion = 0;
*/
END WHILE;

END
$$

DELIMITER ;

-- -----------------------------------------------------
-- procedure SP_obtener_EmpleadoxCarne
-- -----------------------------------------------------

USE `empresaDeTurismoDB`;
DROP procedure IF EXISTS `empresaDeTurismoDB`.`SP_obtener_EmpleadoxCarne`;

DELIMITER $$
USE `empresaDeTurismoDB`$$
CREATE PROCEDURE `SP_obtener_EmpleadoxCarne` (IN pCarne VARCHAR(50))
BEGIN
Select Empleado.nombre,Puesto.hrsLaborarxDia,Puesto.porcentajeComision,
	   TipoPuesto.nombre from Empleado inner join Puesto on Empleado.idPuesto = Puesto.idPuesto
       inner join TipoPuesto on Puesto.idTipoPuesto = TipoPuesto.idTipoPuesto
       Where Empleado.carne = pCarne;
END
$$

DELIMITER ;

-- -----------------------------------------------------
-- procedure SP_obtener_EmpleadoxTipoPuesto
-- -----------------------------------------------------

USE `empresaDeTurismoDB`;
DROP procedure IF EXISTS `empresaDeTurismoDB`.`SP_obtener_EmpleadoxTipoPuesto`;

DELIMITER $$
USE `empresaDeTurismoDB`$$
CREATE PROCEDURE `SP_obtener_EmpleadoxTipoPuesto` (IN pTipoPuesto VARCHAR(50))
BEGIN
Select Empleado.nombre,Puesto.hrsLaborarxDia,Puesto.porcentajeComision,Puesto.salario
	   from Empleado inner join Puesto on Empleado.idPuesto = Puesto.idPuesto
	   inner join TipoPuesto on Puesto.idTipoPuesto = TipoPuesto.idTipoPuesto
       where pTipoPuesto = TipoPuesto.nombre;
END
$$

DELIMITER ;

-- -----------------------------------------------------
-- procedure SP_Insertar_Empleado
-- -----------------------------------------------------

USE `empresaDeTurismoDB`;
DROP procedure IF EXISTS `empresaDeTurismoDB`.`SP_Insertar_Empleado`;

DELIMITER $$
USE `empresaDeTurismoDB`$$
CREATE PROCEDURE `SP_Insertar_Empleado` (
IN pNombreSucursal VARCHAR(50),
IN pNombre VARCHAR(50),
IN pCarne VARCHAR(50),
IN pNombreTipoPuesto VARCHAR(50),
IN pAdministradorFlag INT
)

BEGIN

Insert INTO Empleado(idSucursal,nombre,idPuesto,administradorFlag,carne) VALUES 
(    (SELECT idSucursal from Sucursal WHERE Sucursal.nombre = pNombreSucursal),
     pNombre,
     
     (SELECT idPuesto from Puesto inner join TipoPuesto 
     on Puesto.idTipoPuesto = TipoPuesto.idTipoPuesto where
     TipoPuesto.nombre = pNombreTipoPuesto),
     
     pAdministradorFlag,
     
     pCarne
    );
    
END
$$

DELIMITER ;

-- -----------------------------------------------------
-- procedure SP_actualizar_EmpleadoxCarne
-- -----------------------------------------------------

USE `empresaDeTurismoDB`;
DROP procedure IF EXISTS `empresaDeTurismoDB`.`SP_actualizar_EmpleadoxCarne`;

DELIMITER $$
USE `empresaDeTurismoDB`$$
CREATE PROCEDURE `SP_actualizar_EmpleadoxCarne` (IN pCarne VARCHAR(50),
IN pNombreNuevoPuesto VARCHAR (50)
)

BEGIN
DECLARE vIdEmpleado INT;
DECLARE vIdPuesto INT;

SET vIdEmpleado = (Select idEmpleado from Empleado where Empleado.carne = pCarne);
SET vIdPuesto = (Select idPuesto from Puesto inner join TipoPuesto on
                 Puesto.idTipoPuesto = TipoPuesto.idTipoPuesto
                 where TipoPuesto.nombre = pNombreNuevoPuesto);
                 
update Empleado set Empleado.idPuesto = vIdPuesto
where Empleado.idEmpleado = vIdEmpleado;

END
$$

DELIMITER ;

-- -----------------------------------------------------
-- procedure SP_borrar_EmpleadoxCarne
-- -----------------------------------------------------

USE `empresaDeTurismoDB`;
DROP procedure IF EXISTS `empresaDeTurismoDB`.`SP_borrar_EmpleadoxCarne`;

DELIMITER $$
USE `empresaDeTurismoDB`$$
CREATE PROCEDURE `SP_borrar_EmpleadoxCarne` (IN pCarne VARCHAR(50))
BEGIN
Declare vIdEmpleado INT;
set vIdEmpleado = (Select idEmpleado from Empleado where Empleado.carne = pCarne);
DELETE FROM Empleado where Empleado.idEmpleado = vIdEmpleado;
END
$$

DELIMITER ;

-- -----------------------------------------------------
-- procedure SP_obtener_PaquetexSucursalxEmpresa
-- -----------------------------------------------------

USE `empresaDeTurismoDB`;
DROP procedure IF EXISTS `empresaDeTurismoDB`.`SP_obtener_PaquetexSucursalxEmpresa`;

DELIMITER $$
USE `empresaDeTurismoDB`$$
CREATE PROCEDURE `SP_obtener_PaquetexSucursalxEmpresa` (IN pNombrePaquete VARCHAR(50),
IN pNombreSucursal VARCHAR(50),
IN pNombreEmpresa VARCHAR(50))

BEGIN
Select Paquete.cantidadDisponible,Paquete.fechaTour,Paquete.precio,
Paquete.capacidadPersonas from Paquete inner join Sucursal on 
Paquete.idSucursal = Sucursal.idSucursal inner join Empresa on
Sucursal.idEmpresa = Empresa.idEmpresa
where Paquete.nombre = pNombrePaquete
AND 
Empresa.nombre = pNombreEmpresa
AND
Sucursal.nombre = pNombreSucursal;
END
$$

DELIMITER ;

-- -----------------------------------------------------
-- procedure SP_obtener_PaquetesALLxSucursalxEmpresa
-- -----------------------------------------------------

USE `empresaDeTurismoDB`;
DROP procedure IF EXISTS `empresaDeTurismoDB`.`SP_obtener_PaquetesALLxSucursalxEmpresa`;

DELIMITER $$
USE `empresaDeTurismoDB`$$
CREATE PROCEDURE `SP_obtener_PaquetesALLxSucursalxEmpresa` (
IN pNombreSucursal VARCHAR(50),
IN pNombreEmpresa VARCHAR(50))
BEGIN
Select Paquete.cantidadDisponible,Paquete.fechaTour,Paquete.precio,
Paquete.capacidadPersonas from Paquete inner join Sucursal on 
Paquete.idSucursal = Sucursal.idSucursal inner join Empresa on
Sucursal.idEmpresa = Empresa.idEmpresa
WHERE
Empresa.nombre = pNombreEmpresa
AND
Sucursal.nombre = pNombreSucursal;
END
$$

DELIMITER ;

-- -----------------------------------------------------
-- procedure SP_insertar_Paquete
-- -----------------------------------------------------

USE `empresaDeTurismoDB`;
DROP procedure IF EXISTS `empresaDeTurismoDB`.`SP_insertar_Paquete`;

DELIMITER $$
USE `empresaDeTurismoDB`$$
CREATE PROCEDURE `SP_insertar_Paquete` (
IN pNombreEmpresa VARCHAR(50),
IN pNombreSucursal VARCHAR(50),
IN pCantidadDisponible INT,
IN pFechaTour DATE,
IN pPrecio Decimal(65,2),
IN pCapacidadPersonas int,
IN pNombrePaquete Varchar(50)
)

BEGIN
Declare vIdSucursal INT;
SET vIdSucursal = (Select idSucursal from Sucursal inner join Empresa on
Sucursal.idEmpresa = Empresa.idEmpresa
where Sucursal.nombre = pNombreSucursal
and
Empresa.nombre = pNombreEmpresa
);
INSERT INTO Paquete(idSucursal,cantidadDisponible,fechaTour,capacidadPersonas,nombre,precio)
VALUES
(vIdSucursal,pCantidadDisponible,pFechaTour,pCapacidadPersonas,pNombrePaquete,pPrecio);

END
$$

DELIMITER ;

-- -----------------------------------------------------
-- procedure SP_actualizar_PaquetexSucursalxEmpresa
-- -----------------------------------------------------

USE `empresaDeTurismoDB`;
DROP procedure IF EXISTS `empresaDeTurismoDB`.`SP_actualizar_PaquetexSucursalxEmpresa`;

DELIMITER $$
USE `empresaDeTurismoDB`$$
CREATE PROCEDURE `SP_actualizar_PaquetexSucursalxEmpresa` (IN pNombrePaquete VARCHAR(50), 
IN pNombreSucursal VARCHAR(50), IN pNombreEmpresa VARCHAR(50),
IN pNuevaFecha date,IN pNuevoPrecio decimal(65,2)
)
BEGIN
DECLARE vIdPaquete INT; 

Set vIdPaquete = (Select idPaquete from Paquete inner join
Sucursal on Paquete.idSucursal = Sucursal.idSucursal inner join
Empresa on Sucursal.idEmpresa = Empresa.idEmpresa
where Empresa.nombre = pNombreEmpresa
and
Sucursal.nombre = pNombreSucursal
and
Paquete.nombre = pNombrePaquete
);
UPDATE Paquete set Paquete.fechaTour = pNuevaFecha ,Paquete.precio = pNuevoPrecio
where Paquete.idPaquete = vIdPaquete;
END
$$

DELIMITER ;

-- -----------------------------------------------------
-- procedure SP_obtener_SucursalDirxEmpresa
-- -----------------------------------------------------

USE `empresaDeTurismoDB`;
DROP procedure IF EXISTS `empresaDeTurismoDB`.`SP_obtener_SucursalDirxEmpresa`;

DELIMITER $$
USE `empresaDeTurismoDB`$$
CREATE PROCEDURE `SP_obtener_SucursalDirxEmpresa` (IN pNombreEmpresa VARCHAR(50))
BEGIN
DECLARE vidEmpresa INT;
SET     vidEmpresa = (Select idEmpresa from Empresa 
                      where Empresa.nombre = pNombreEmpresa );
                      
Select Sucursal.nombre,Ciudad.nombre,Estado.nombre,Pais.nombre from Sucursal
inner join Direccion on Sucursal.idDireccion = Direccion.idDireccion
inner join Ciudad on Direccion.idCiudad = Ciudad.idCiudad
inner join Estado on Ciudad.idEstado = Estado.idEstado
inner join Pais on Estado.idPais = Pais.idPais
where
Sucursal.idEmpresa = vIdEmpresa;
END
$$

DELIMITER ;

-- -----------------------------------------------------
-- procedure SP_actualizar_SucursalxEmpresa
-- -----------------------------------------------------

USE `empresaDeTurismoDB`;
DROP procedure IF EXISTS `empresaDeTurismoDB`.`SP_actualizar_SucursalxEmpresa`;

DELIMITER $$
USE `empresaDeTurismoDB`$$
CREATE PROCEDURE `SP_actualizar_SucursalxEmpresa` (IN pNombreEmpresa VARCHAR(50),
IN pNombreSucursal VARCHAR(50), IN pNuevoNombre VARCHAR(50))
BEGIN
DECLARE vIdEmpresa INT;
SET vIdEmpresa = (Select idEmpresa from Empresa where Empresa.nombre = pNombreEmpresa);
Update Sucursal set Sucursal.nombre = pNuevoNombre 
where Sucursal.idEmpresa = vIdEmpresa
and 
Sucursal.nombre = pNombreSucursal;
END
$$

DELIMITER ;

-- -----------------------------------------------------
-- procedure SP_comprar_Paquete
-- -----------------------------------------------------

USE `empresaDeTurismoDB`;
DROP procedure IF EXISTS `empresaDeTurismoDB`.`SP_comprar_Paquete`;

DELIMITER $$
USE `empresaDeTurismoDB`$$
CREATE PROCEDURE `SP_comprar_Paquete` (IN pNombreEmpresa VARCHAR(50),
IN pNombreSucursal VARCHAR(50), IN pNombrePaquete VARCHAR(50), IN pCarneEmpleado VARCHAR(50),
IN pCedulaCliente VARCHAR(50), IN pMedioPago VARCHAR(50), IN pPago DECIMAL(65,2)
)
BEGIN
DECLARE vIdVenta INT;
DECLARE vIdEmpresa INT; 
DECLARE vIdSucursal INT;
DECLARE vIdPaquete INT;
DECLARE vIdCliente INT;
DECLARE vIdEmpleado INT;
DECLARE vIdMedioPago INT;
DECLARE vIdEstadoVenta INT;
DECLARE vPrecioPaquete DECIMAL(65,2);
DECLARE vDescuento FLOAT;
DECLARE vMontoActual FLOAT;
DECLARE vFechaVenta DATE;
DECLARE vCantDispPaq INT;


SET vIdEmpresa = (Select idEmpresa  from Empresa where Empresa.nombre = pNombreEmpresa);

SET vIdSucursal= (Select idSucursal from Sucursal where Sucursal.nombre = pNombreSucursal);

SET vIdCliente = (Select idCliente  from Cliente where Cliente.cedula = pCedulaCliente);

SET vIdEmpleado =(Select idEmpleado from Empleado where Empleado.carne = pCarneEmpleado);

SET vIdMedioPago = (Select idMedio from Medio where Medio.nombre = pMedioPago );

SET vIdPaquete = (Select idPaquete from Paquete inner join Sucursal 
on Paquete.idSucursal = Sucursal.idSucursal inner join Empresa
on Sucursal.idEmpresa = Empresa.idEmpresa
where Empresa.idEmpresa = vIdEmpresa
and Sucursal.idSucursal = vIdSucursal
and Paquete.nombre = pNombrePaquete
 );

SET vCantDispPaq = (Select cantidadDisponible from Paquete where Paquete.idPaquete = vIdPaquete);

SET vPrecioPaquete = (Select precio from Paquete where Paquete.idPaquete = vIdPaquete);

SET vDescuento = (SELECT FLOOR(1 + RAND() * ((10 - 1) + 1)));

SET vPrecioPaquete =  vPrecioPaquete- ((vPrecioPaquete / 100) * vDescuento);

SET vMontoActual = pPago;

SET vFechaVenta = curdate();

IF pPago = 0 THEN
Select 'No ha instroducido dinero' as '';
END IF;

IF vCantDispPaq = 0 THEN
SELECT 'No hay existencias de este paquete disponibles' as '';
END IF;


IF vCantDispPaq > 0  AND ((vPrecioPaquete / 100)*10) <= pPago THEN

IF vPrecioPaquete <= pPago then
SET vIdEstadoVenta = (Select idEstadoVenta from EstadoVenta where EstadoVenta.nombre = "Cancelado");
SELECT 'Se ha cancelado el monto total del paquete con exito' as '';
END IF;

IF vPrecioPaquete > pPago then
SET vIdEstadoVenta = (Select idEstadoVenta from EstadoVenta where EstadoVenta.nombre = "Reservado");
SELECT 'Se ha reservado paquete con existo' as '';
END IF;
 
 INSERT INTO Venta(idEmpleado,idCliente,idEstadoVenta,idMedio,idPaquete,fecha
 ,montoTotal,montoActual,descuento,numeroReferencia)  
 
 VALUES (vIdEmpleado,vIdCliente,vIdEstadoVenta,vIdMedioPago,vIdPaquete,vFechaVenta
 ,vPrecioPaquete,vMontoActual,vDescuento,
  (SELECT AUTO_INCREMENT FROM information_schema.TABLES
    WHERE TABLE_SCHEMA = 'empresaDeTurismoDB' 
 AND TABLE_NAME = 'Venta')
 ); 
 
 #vIdPaquete
UPDATE Paquete set cantidadDisponible = cantidadDisponible - 1
where Paquete.idPaquete = vIdPaquete;
 
 
 SET vIdVenta = LAST_INSERT_ID();
 
 INSERT INTO Pago(idVenta,monto,fecha)
 VALUES(vIdVenta,pPago,vFechaVenta);

 END IF;
 
 
END
$$

DELIMITER ;

-- -----------------------------------------------------
-- procedure SP_obtener_ClientexCedula
-- -----------------------------------------------------

USE `empresaDeTurismoDB`;
DROP procedure IF EXISTS `empresaDeTurismoDB`.`SP_obtener_ClientexCedula`;

DELIMITER $$
USE `empresaDeTurismoDB`$$
CREATE PROCEDURE `SP_obtener_ClientexCedula` (IN pCedula VARCHAR(50))
BEGIN
Select nombre,cedula from Cliente where Cliente.cedula = pCedula;
END
$$

DELIMITER ;

-- -----------------------------------------------------
-- procedure SP_actualizar_ClientexCedula
-- -----------------------------------------------------

USE `empresaDeTurismoDB`;
DROP procedure IF EXISTS `empresaDeTurismoDB`.`SP_actualizar_ClientexCedula`;

DELIMITER $$
USE `empresaDeTurismoDB`$$
CREATE PROCEDURE `SP_actualizar_ClientexCedula` (IN pNuevoNombre Varchar(50),
IN pCedula Varchar(50))
BEGIN
DECLARE vIdCliente INT;
SET vIdCliente = (Select idCliente from Cliente where Cliente.cedula = pCedula); 
UPDATE Cliente set Cliente.nombre = pNuevoNombre where Cliente.idCliente = vIdCliente;
END
$$

DELIMITER ;

-- -----------------------------------------------------
-- procedure SP_insertar_Cliente
-- -----------------------------------------------------

USE `empresaDeTurismoDB`;
DROP procedure IF EXISTS `empresaDeTurismoDB`.`SP_insertar_Cliente`;

DELIMITER $$
USE `empresaDeTurismoDB`$$
CREATE PROCEDURE `SP_insertar_Cliente` (IN pNombre Varchar(50), IN pCedula varchar(50))
BEGIN
INSERT INTO Cliente (nombre,cedula) values (pNombre,pCedula);
END
$$

DELIMITER ;

-- -----------------------------------------------------
-- procedure SP_obtener_Boleta
-- -----------------------------------------------------

USE `empresaDeTurismoDB`;
DROP procedure IF EXISTS `empresaDeTurismoDB`.`SP_obtener_Boleta`;

DELIMITER $$
USE `empresaDeTurismoDB`$$
CREATE PROCEDURE `SP_obtener_Boleta` (IN pCedula VARCHAR(50), IN pNombrePaquete VARCHAR(50))
BEGIN
DECLARE vIdCliente INT;

SET vIdCliente = (Select idCliente from Cliente where Cliente.cedula = pCedula);

#Select 


END
$$

DELIMITER ;

-- -----------------------------------------------------
-- procedure SP_abonar_Pago
-- -----------------------------------------------------

USE `empresaDeTurismoDB`;
DROP procedure IF EXISTS `empresaDeTurismoDB`.`SP_abonar_Pago`;

DELIMITER $$
USE `empresaDeTurismoDB`$$
CREATE PROCEDURE `SP_abonar_Pago` (IN pCedulaCliente VARCHAR(50),
IN pMontoPago DECIMAL(65,2),
IN pNumeroVenta INT
)
BEGIN
DECLARE vIdVenta INT;
DECLARE vIdEstadoVenta INT;
DECLARE vNombreEstadoVenta VARCHAR(50);
DECLARE vMontoTotal DECIMAL(65,2);
DECLARE vMontoActual DECIMAL(65,2);
DECLARE vIdEstadoCancelado INT;

SET vIdEstadoCancelado = (Select idEstadoVenta from EstadoVenta 
                          where EstadoVenta.nombre = "Cancelado");
                          
SET vIdVenta = (SELECT idVenta from Venta where Venta.numeroReferencia = pNumeroVenta);
SET vIdEstadoVenta = (SELECT idEstadoVenta from Venta where Venta.idVenta = vIdVenta);
SET vNombreEstadoVenta = (SELECT nombre from EstadoVenta
                           where EstadoVenta.idEstadoVenta = vIdEstadoVenta);
                           
SET vMontoTotal = (Select montoTotal from Venta where Venta.idVenta = vIdVenta);
SET vMontoActual = (Select montoActual from Venta where Venta.idVenta = IdVenta);

IF vNombreEstadoVenta = "Cancelado" then
Select 'La venta ya se encuentra cancelada en su totalidad - no se acepta el pago' as '';
END IF;

IF NOT vNombreEstadoVenta = "Cancelado" then
Select 'Se ha registrado con exito el pago' as '';
INSERT INTO Pago(idVenta,monto,fecha)
VALUES (vIdVenta,pMontoPago,curdate());

IF (vMontoActual + pMontoPago) >= vMontoTotal THEN
Select 'Se ha cancelado con exito el monto total del paquete' as '';
UPDATE Venta set Venta.idEstadoVenta = vIdEstadoCancelado where Venta.idVenta = vIdVenta;
end if;

UPDATE Venta set Venta.montoActual = vMontoActual + pMontoPago
where Venta.idVenta = vIdVenta;

END IF;

END
$$

DELIMITER ;

-- -----------------------------------------------------
-- procedure SP_pago_ComisionesxEmpleado
-- -----------------------------------------------------

USE `empresaDeTurismoDB`;
DROP procedure IF EXISTS `empresaDeTurismoDB`.`SP_pago_ComisionesxEmpleado`;

DELIMITER $$
USE `empresaDeTurismoDB`$$
CREATE PROCEDURE `SP_pago_ComisionesxEmpleado` (IN pCarneEmpleado VARCHAR(50))
BEGIN

  DECLARE vIdEmpleado INT;
  DECLARE vIdVenta INT;
  DECLARE vPorcentajeComision FLOAT;
  DECLARE vIdPuesto INT;
-- Variables donde almacenar lo que nos traemos desde el SELECT
  DECLARE vMontoTotal DECIMAL(65,2);
-- Variable para controlar el fin del bucle
  DECLARE fin INTEGER DEFAULT 0;
 
-- El SELECT que vamos a ejecutar
  DECLARE ventas_cursor CURSOR FOR 
    SELECT idVenta, montoTotal FROM Venta inner join Empleado 
    on Venta.idEmpleado = Empleado.idEmpleado where Empleado.carne = pCarneEmpleado;

-- Condición de salida
  DECLARE CONTINUE HANDLER FOR NOT FOUND SET fin=1;
  
SET vIdEmpleado = (Select idEmpleado from Empleado where Empleado.carne = pCarneEmpleado);
SET vIdPuesto = (Select idPuesto from Empleado where Empleado.carne = pCarneEmpleado);

SET vPorcentajeComision = (Select porcentajeComision from Puesto
 where Puesto.idPuesto= vIdPuesto );

  OPEN ventas_cursor;
  get_montos: LOOP
    FETCH ventas_cursor INTO vIdVenta,vMontoTotal;
    IF fin = 1 THEN
       LEAVE get_montos;
    END IF;


 INSERT INTO ComisionxVenta(idEmpleado,idVenta,monto,fecha) 
 values (vIdEmpleado,vIdVenta,((vMontoTotal/100)*vPorcentajeComision),curdate());
 
  END LOOP get_montos;

  CLOSE ventas_cursor;



END
$$

DELIMITER ;

-- -----------------------------------------------------
-- procedure SP_obtener_ComisionesxSucursal
-- -----------------------------------------------------

USE `empresaDeTurismoDB`;
DROP procedure IF EXISTS `empresaDeTurismoDB`.`SP_obtener_ComisionesxSucursal`;

DELIMITER $$
USE `empresaDeTurismoDB`$$
CREATE PROCEDURE `SP_obtener_ComisionesxSucursal` (IN pNombreSucursal VARCHAR(50))
BEGIN

Select * from ComisionxVenta inner join Empleado on 
ComisionxVenta.idEmpleado = Empleado.idEmpleado inner join Sucursal
on Empleado.idSucursal = Sucursal.idSucursal where Sucursal.nombre = pNombreSucursal;
END
$$

DELIMITER ;

-- -----------------------------------------------------
-- procedure SP_obtener_ComisionesxVendedor
-- -----------------------------------------------------

USE `empresaDeTurismoDB`;
DROP procedure IF EXISTS `empresaDeTurismoDB`.`SP_obtener_ComisionesxVendedor`;

DELIMITER $$
USE `empresaDeTurismoDB`$$
CREATE PROCEDURE `SP_obtener_ComisionesxVendedor` (IN pCarneVendedor VARCHAR(50))
BEGIN
Select * from ComisionxVenta inner join Empleado on 
ComisionxVenta.idEmpleado = Empleado.idEmpleado where Empleado.carne = pCarneVendedor;
END
$$

DELIMITER ;

-- -----------------------------------------------------
-- procedure SP_obtener_ComisionesxFecha
-- -----------------------------------------------------

USE `empresaDeTurismoDB`;
DROP procedure IF EXISTS `empresaDeTurismoDB`.`SP_obtener_ComisionesxFecha`;

DELIMITER $$
USE `empresaDeTurismoDB`$$
CREATE PROCEDURE `SP_obtener_ComisionesxFecha` (IN pFecha DATE)
BEGIN
Select * from ComisionxVenta where ComisionxVenta.fecha = pFecha;
END
$$

DELIMITER ;

-- -----------------------------------------------------
-- procedure SP_obtener_GananciasNetasxSucursal
-- -----------------------------------------------------

USE `empresaDeTurismoDB`;
DROP procedure IF EXISTS `empresaDeTurismoDB`.`SP_obtener_GananciasNetasxSucursal`;

DELIMITER $$
USE `empresaDeTurismoDB`$$
CREATE PROCEDURE `SP_obtener_GananciasNetasxSucursal` (IN pNombreSucursal VARCHAR(50))
BEGIN
Select SUM(monto) from Pago inner join Venta on Pago.idVenta = Venta.idVenta inner join
Empleado on Venta.idEmpleado = Empleado.idEmpleado inner join Sucursal on
Empleado.idSucursal = Sucursal.idSucursal where Sucursal.nombre = pNombreSucursal;
END
$$

DELIMITER ;

-- -----------------------------------------------------
-- procedure SP_obtener_GananciasNetasxFecha
-- -----------------------------------------------------

USE `empresaDeTurismoDB`;
DROP procedure IF EXISTS `empresaDeTurismoDB`.`SP_obtener_GananciasNetasxFecha`;

DELIMITER $$
USE `empresaDeTurismoDB`$$
CREATE PROCEDURE `SP_obtener_GananciasNetasxFecha` (IN pFecha DATE)
BEGIN
Select Sum(monto) from Pago where Pago.fecha = pFecha;
END
$$

DELIMITER ;

-- -----------------------------------------------------
-- procedure SP_obtener_GananciasNetasxPaquete
-- -----------------------------------------------------

USE `empresaDeTurismoDB`;
DROP procedure IF EXISTS `empresaDeTurismoDB`.`SP_obtener_GananciasNetasxPaquete`;

DELIMITER $$
USE `empresaDeTurismoDB`$$
CREATE PROCEDURE `SP_obtener_GananciasNetasxPaquete` (IN pNombrePaquete VARCHAR(50))
BEGIN
Select Sum(monto) from Pago inner join Venta on Pago.idVenta = Venta.idVenta
							inner join Paquete on Venta.idPaquete = Paquete.idPaquete
                            where Paquete.nombre = pNombrePaquete;
END
$$

DELIMITER ;

-- -----------------------------------------------------
-- procedure SP_obtener_MejoresVendedoresxSucursal
-- -----------------------------------------------------

USE `empresaDeTurismoDB`;
DROP procedure IF EXISTS `empresaDeTurismoDB`.`SP_obtener_MejoresVendedoresxSucursal`;

DELIMITER $$
USE `empresaDeTurismoDB`$$
CREATE PROCEDURE `SP_obtener_MejoresVendedoresxSucursal`(IN pNombreSucursal VARCHAR(50))
BEGIN

  DECLARE vIdEmpleado INT;
  DECLARE vNombre VARCHAR(50);
  DECLARE vCantVentas INT;
  
-- Variable para controlar el fin del bucle
  DECLARE fin INTEGER DEFAULT 0;
 
-- El SELECT que vamos a ejecutar
  DECLARE empleados_cursor CURSOR FOR 
    SELECT Empleado.idEmpleado,Empleado.nombre FROM Empleado inner join Sucursal 
    on Empleado.idSucursal = Sucursal.idSucursal where Sucursal.nombre = pNombreSucursal;

-- Condición de salida
DECLARE CONTINUE HANDLER FOR NOT FOUND SET fin=1;

DROP TEMPORARY TABLE IF EXISTS EmpleadoVentas;

CREATE TEMPORARY TABLE EmpleadoVentas(
idEmpleado int primary key not null auto_increment,
nombre Varchar(50) not null,
cantVentas int not null
);

  OPEN empleados_cursor;
  get_empleados: LOOP
    FETCH empleados_cursor INTO vIdEmpleado,vNombre;
    IF fin = 1 THEN
       LEAVE get_empleados;
    END IF;

SET vCantVentas = (Select count(Venta.idEmpleado) from Empleado inner join Venta on
  Empleado.idEmpleado = Venta.idEmpleado where Empleado.idEmpleado = vIdEmpleado);
  INSERT INTO EmpleadoVentas (idEmpleado,nombre,cantVentas) 
  values (vIdEmpleado,vNombre,vCantVentas);
# INSERT INTO ComisionxVenta(idEmpleado,idVenta,monto,fecha) 
# values (vIdEmpleado,vIdVenta,((vMontoTotal/100)*vPorcentajeComision),curdate());
 
  END LOOP get_empleados;

  CLOSE empleados_cursor;

Select * from EmpleadoVentas order by cantVentas DESC;

DROP TEMPORARY TABLE IF EXISTS EmpleadoVentas;

END
$$

DELIMITER ;

-- -----------------------------------------------------
-- procedure SP_obtener_MejoresVendedoresxFecha
-- -----------------------------------------------------

USE `empresaDeTurismoDB`;
DROP procedure IF EXISTS `empresaDeTurismoDB`.`SP_obtener_MejoresVendedoresxFecha`;

DELIMITER $$
USE `empresaDeTurismoDB`$$
CREATE PROCEDURE `SP_obtener_MejoresVendedoresxFecha` (IN pFecha DATE)
BEGIN

DECLARE vIdEmpleado INT;
  DECLARE vNombre VARCHAR(50);
  DECLARE vCantVentas INT;
  
-- Variable para controlar el fin del bucle
  DECLARE fin INTEGER DEFAULT 0;
 
-- El SELECT que vamos a ejecutar
  DECLARE empleados_cursor CURSOR FOR 
    SELECT Empleado.idEmpleado,Empleado.nombre FROM Empleado;

-- Condición de salida
DECLARE CONTINUE HANDLER FOR NOT FOUND SET fin=1;

DROP TEMPORARY TABLE IF EXISTS EmpleadoVentas;

CREATE TEMPORARY TABLE EmpleadoVentas(
idEmpleado int primary key not null auto_increment,
nombre Varchar(50) not null,
cantVentas int not null
);

  OPEN empleados_cursor;
  get_empleados: LOOP
    FETCH empleados_cursor INTO vIdEmpleado,vNombre;
    IF fin = 1 THEN
       LEAVE get_empleados;
    END IF;

SET vCantVentas = (Select count(Venta.idEmpleado) from Empleado inner join Venta on
  Empleado.idEmpleado = Venta.idEmpleado where Empleado.idEmpleado = vIdEmpleado
  AND Venta.fecha = pFecha);
  
  INSERT INTO EmpleadoVentas (idEmpleado,nombre,cantVentas) 
  values (vIdEmpleado,vNombre,vCantVentas);
 
  END LOOP get_empleados;

  CLOSE empleados_cursor;

Select * from EmpleadoVentas order by cantVentas DESC;

DROP TEMPORARY TABLE IF EXISTS EmpleadoVentas;

END
$$

DELIMITER ;

-- -----------------------------------------------------
-- procedure SP_obtener_MejoresVendedoresxPaquete
-- -----------------------------------------------------

USE `empresaDeTurismoDB`;
DROP procedure IF EXISTS `empresaDeTurismoDB`.`SP_obtener_MejoresVendedoresxPaquete`;

DELIMITER $$
USE `empresaDeTurismoDB`$$
CREATE PROCEDURE `SP_obtener_MejoresVendedoresxPaquete` (IN pNombrePaquete VARCHAR(50))
BEGIN

DECLARE vIdEmpleado INT;
  DECLARE vNombre VARCHAR(50);
  DECLARE vCantVentas INT;
  DECLARE vIdPaquete INT;
  
-- Variable para controlar el fin del bucle
  DECLARE fin INTEGER DEFAULT 0;
 
-- El SELECT que vamos a ejecutar
  DECLARE empleados_cursor CURSOR FOR 
    SELECT Empleado.idEmpleado,Empleado.nombre FROM Empleado;

-- Condición de salida
DECLARE CONTINUE HANDLER FOR NOT FOUND SET fin=1;

SET vIdPaquete = (SELECT idPaquete from Paquete where Paquete.nombre = pNombrePaquete);

DROP TEMPORARY TABLE IF EXISTS EmpleadoVentas;

CREATE TEMPORARY TABLE EmpleadoVentas(
idEmpleado int primary key not null auto_increment,
nombre Varchar(50) not null,
cantVentas int not null
);

  OPEN empleados_cursor;
  get_empleados: LOOP
    FETCH empleados_cursor INTO vIdEmpleado,vNombre;
    IF fin = 1 THEN
       LEAVE get_empleados;
    END IF;

SET vCantVentas = (Select count(Venta.idEmpleado) from Empleado inner join Venta on
  Empleado.idEmpleado = Venta.idEmpleado where Empleado.idEmpleado = vIdEmpleado
  AND Venta.idPaquete = vIdPaquete);
  
  INSERT INTO EmpleadoVentas (idEmpleado,nombre,cantVentas) 
  values (vIdEmpleado,vNombre,vCantVentas);
 
  END LOOP get_empleados;

  CLOSE empleados_cursor;

Select * from EmpleadoVentas order by cantVentas DESC;

DROP TEMPORARY TABLE IF EXISTS EmpleadoVentas;


END
$$

DELIMITER ;

-- -----------------------------------------------------
-- procedure SP_obtener_ClienteMasFrecuentexPaquete
-- -----------------------------------------------------

USE `empresaDeTurismoDB`;
DROP procedure IF EXISTS `empresaDeTurismoDB`.`SP_obtener_ClienteMasFrecuentexPaquete`;

DELIMITER $$
USE `empresaDeTurismoDB`$$
CREATE PROCEDURE `SP_obtener_ClienteMasFrecuentexPaquete` (IN pNombrePaquete VARCHAR(50))
BEGIN

DECLARE vIdCliente INT;
  DECLARE vNombre VARCHAR(50);
  DECLARE vCantVentas INT;
  DECLARE vIdPaquete INT;
  
-- Variable para controlar el fin del bucle
  DECLARE fin INTEGER DEFAULT 0;
 
-- El SELECT que vamos a ejecutar
  DECLARE clientes_cursor CURSOR FOR 
    SELECT Cliente.idCliente,Cliente.nombre FROM Cliente;

-- Condición de salida
DECLARE CONTINUE HANDLER FOR NOT FOUND SET fin=1;

SET vIdPaquete = (SELECT idPaquete from Paquete where Paquete.nombre = pNombrePaquete);

DROP TEMPORARY TABLE IF EXISTS ClienteVentas;

CREATE TEMPORARY TABLE ClienteVentas(
idCliente int primary key not null auto_increment,
nombre Varchar(50) not null,
cantVentas int not null
);

  OPEN clientes_cursor;
  get_clientes: LOOP
    FETCH clientes_cursor INTO vIdCliente,vNombre;
    IF fin = 1 THEN
       LEAVE get_clientes;
    END IF;

SET vCantVentas = (Select count(Venta.idCliente) from Cliente inner join Venta on
  Cliente.idCliente = Venta.idCliente where Cliente.idCliente= vIdCliente
  AND Venta.idPaquete = vIdPaquete);
  
  INSERT INTO ClienteVentas (idCliente,nombre,cantVentas) 
  values (vIdCliente,vNombre,vCantVentas);
 
  END LOOP get_clientes;

  CLOSE clientes_cursor;

Select * from ClienteVentas order by cantVentas DESC;

DROP TEMPORARY TABLE IF EXISTS ClienteVentas;
END
$$

DELIMITER ;

-- -----------------------------------------------------
-- procedure SP_obtener_ClienteMasFrecuentexFecha
-- -----------------------------------------------------

USE `empresaDeTurismoDB`;
DROP procedure IF EXISTS `empresaDeTurismoDB`.`SP_obtener_ClienteMasFrecuentexFecha`;

DELIMITER $$
USE `empresaDeTurismoDB`$$
CREATE PROCEDURE `SP_obtener_ClienteMasFrecuentexFecha` (IN pFecha DATE)
BEGIN
DECLARE vIdCliente INT;
  DECLARE vNombre VARCHAR(50);
  DECLARE vCantVentas INT;
  DECLARE vIdPaquete INT;
  
-- Variable para controlar el fin del bucle
  DECLARE fin INTEGER DEFAULT 0;
 
-- El SELECT que vamos a ejecutar
  DECLARE clientes_cursor CURSOR FOR 
    SELECT Cliente.idCliente,Cliente.nombre FROM Cliente;

-- Condición de salida
DECLARE CONTINUE HANDLER FOR NOT FOUND SET fin=1;

DROP TEMPORARY TABLE IF EXISTS ClienteVentas;

CREATE TEMPORARY TABLE ClienteVentas(
idCliente int primary key not null auto_increment,
nombre Varchar(50) not null,
cantVentas int not null
);

  OPEN clientes_cursor;
  get_clientes: LOOP
    FETCH clientes_cursor INTO vIdCliente,vNombre;
    IF fin = 1 THEN
       LEAVE get_clientes;
    END IF;

SET vCantVentas = (Select count(Venta.idCliente) from Cliente inner join Venta on
  Cliente.idCliente = Venta.idCliente where Cliente.idCliente= vIdCliente
  AND Venta.fecha = pFecha);
  
  INSERT INTO ClienteVentas (idCliente,nombre,cantVentas) 
  values (vIdCliente,vNombre,vCantVentas);
 
  END LOOP get_clientes;

  CLOSE clientes_cursor;

Select * from ClienteVentas order by cantVentas DESC;

DROP TEMPORARY TABLE IF EXISTS ClienteVentas;
END
$$

DELIMITER ;

-- -----------------------------------------------------
-- procedure SP_obtener_ClienteMasFrecuentexSucursal
-- -----------------------------------------------------

USE `empresaDeTurismoDB`;
DROP procedure IF EXISTS `empresaDeTurismoDB`.`SP_obtener_ClienteMasFrecuentexSucursal`;

DELIMITER $$
USE `empresaDeTurismoDB`$$
CREATE PROCEDURE `SP_obtener_ClienteMasFrecuentexSucursal` (IN pNombreSucursal VARCHAR(50))
BEGIN
DECLARE vIdCliente INT;
  DECLARE vNombre VARCHAR(50);
  DECLARE vCantVentas INT;
  DECLARE vIdPaquete INT;
  
-- Variable para controlar el fin del bucle
  DECLARE fin INTEGER DEFAULT 0;
 
-- El SELECT que vamos a ejecutar
  DECLARE clientes_cursor CURSOR FOR 
    SELECT Cliente.idCliente,Cliente.nombre FROM Cliente;

-- Condición de salida
DECLARE CONTINUE HANDLER FOR NOT FOUND SET fin=1;

DROP TEMPORARY TABLE IF EXISTS ClienteVentas;

CREATE TEMPORARY TABLE ClienteVentas(
idCliente int primary key not null auto_increment,
nombre Varchar(50) not null,
cantVentas int not null
);

  OPEN clientes_cursor;
  get_clientes: LOOP
    FETCH clientes_cursor INTO vIdCliente,vNombre;
    IF fin = 1 THEN
       LEAVE get_clientes;
    END IF;

SET vCantVentas = (Select count(Venta.idCliente) from Cliente inner join Venta on
  Cliente.idCliente = Venta.idCliente inner join Paquete on 
  Venta.idPaquete = Paquete.idPaquete inner join Sucursal on
  Paquete.idSucursal = Sucursal.idSucursal
  where Cliente.idCliente= vIdCliente
  and Sucursal.nombre = pNombreSucursal
  );
  
  INSERT INTO ClienteVentas (idCliente,nombre,cantVentas) 
  values (vIdCliente,vNombre,vCantVentas);
 
  END LOOP get_clientes;

  CLOSE clientes_cursor;

Select * from ClienteVentas order by cantVentas DESC;

DROP TEMPORARY TABLE IF EXISTS ClienteVentas;
END
$$

DELIMITER ;

-- -----------------------------------------------------
-- procedure SP_obtener_PaqueteMasVendidoxSucursal
-- -----------------------------------------------------

USE `empresaDeTurismoDB`;
DROP procedure IF EXISTS `empresaDeTurismoDB`.`SP_obtener_PaqueteMasVendidoxSucursal`;

DELIMITER $$
USE `empresaDeTurismoDB`$$
CREATE PROCEDURE `SP_obtener_PaqueteMasVendidoxSucursal` (IN pNombreSucursal VARCHAR(50))
BEGIN
 DECLARE  vIdPaquete INT;
  DECLARE vNombre VARCHAR(50);
  DECLARE vCantVentas INT;
  
-- Variable para controlar el fin del bucle
  DECLARE fin INTEGER DEFAULT 0;
 
-- El SELECT que vamos a ejecutar
  DECLARE paquetes_cursor CURSOR FOR 
    SELECT Paquete.idPaquete,Paquete.nombre FROM Paquete inner join Sucursal 
    on Paquete.idSucursal = Sucursal.idSucursal where Sucursal.nombre = pNombreSucursal;

-- Condición de salida
DECLARE CONTINUE HANDLER FOR NOT FOUND SET fin=1;

DROP TEMPORARY TABLE IF EXISTS PaqueteVentas;

CREATE TEMPORARY TABLE PaqueteVentas(
idPaquete int primary key not null auto_increment,
nombre Varchar(50) not null,
cantVentas int not null
);

  OPEN paquetes_cursor;
  get_paquetes: LOOP
    FETCH paquetes_cursor INTO vIdPaquete,vNombre;
    IF fin = 1 THEN
       LEAVE get_paquetes;
    END IF;

SET vCantVentas = (Select count(Venta.idEmpleado) from Paquete inner join Venta on
  Paquete.idPaquete = Venta.idPaquete where Paquete.idPaquete = vIdPaquete);
  INSERT INTO PaqueteVentas (idPaquete,nombre,cantVentas) 
  values (vIdPaquete,vNombre,vCantVentas);
# INSERT INTO ComisionxVenta(idEmpleado,idVenta,monto,fecha) 
# values (vIdEmpleado,vIdVenta,((vMontoTotal/100)*vPorcentajeComision),curdate());
 
  END LOOP get_paquetes;

  CLOSE paquetes_cursor;

Select * from PaqueteVentas order by cantVentas DESC;

DROP TEMPORARY TABLE IF EXISTS PaqueteVentas;

END
$$

DELIMITER ;

-- -----------------------------------------------------
-- procedure SP_obtener_PaqueteMasVendidoxFecha
-- -----------------------------------------------------

USE `empresaDeTurismoDB`;
DROP procedure IF EXISTS `empresaDeTurismoDB`.`SP_obtener_PaqueteMasVendidoxFecha`;

DELIMITER $$
USE `empresaDeTurismoDB`$$
CREATE PROCEDURE `SP_obtener_PaqueteMasVendidoxFecha` (IN pFecha DATE)
BEGIN
 DECLARE  vIdPaquete INT;
  DECLARE vNombre VARCHAR(50);
  DECLARE vCantVentas INT;
  
-- Variable para controlar el fin del bucle
  DECLARE fin INTEGER DEFAULT 0;
 
-- El SELECT que vamos a ejecutar
  DECLARE paquetes_cursor CURSOR FOR 
    SELECT Paquete.idPaquete,Paquete.nombre FROM Paquete;

-- Condición de salida
DECLARE CONTINUE HANDLER FOR NOT FOUND SET fin=1;

DROP TEMPORARY TABLE IF EXISTS PaqueteVentas;

CREATE TEMPORARY TABLE PaqueteVentas(
idPaquete int primary key not null auto_increment,
nombre Varchar(50) not null,
cantVentas int not null
);

  OPEN paquetes_cursor;
  get_paquetes: LOOP
    FETCH paquetes_cursor INTO vIdPaquete,vNombre;
    IF fin = 1 THEN
       LEAVE get_paquetes;
    END IF;

SET vCantVentas = (Select count(Venta.idEmpleado) from Paquete inner join Venta on
  Paquete.idPaquete = Venta.idPaquete where Paquete.idPaquete = vIdPaquete
  and Venta.fecha = pFecha);
  INSERT INTO PaqueteVentas (idPaquete,nombre,cantVentas) 
  values (vIdPaquete,vNombre,vCantVentas);
# INSERT INTO ComisionxVenta(idEmpleado,idVenta,monto,fecha) 
# values (vIdEmpleado,vIdVenta,((vMontoTotal/100)*vPorcentajeComision),curdate());
 
  END LOOP get_paquetes;

  CLOSE paquetes_cursor;

Select * from PaqueteVentas order by cantVentas DESC;

DROP TEMPORARY TABLE IF EXISTS PaqueteVentas;
END
$$

DELIMITER ;

-- -----------------------------------------------------
-- procedure SP_obtener_PaqueteMasVendidoxPaquete
-- -----------------------------------------------------

USE `empresaDeTurismoDB`;
DROP procedure IF EXISTS `empresaDeTurismoDB`.`SP_obtener_PaqueteMasVendidoxPaquete`;

DELIMITER $$
USE `empresaDeTurismoDB`$$
CREATE PROCEDURE `SP_obtener_PaqueteMasVendidoxPaquete` ()
BEGIN
DECLARE  vIdPaquete INT;
  DECLARE vNombre VARCHAR(50);
  DECLARE vCantVentas INT;
  
-- Variable para controlar el fin del bucle
  DECLARE fin INTEGER DEFAULT 0;
 
-- El SELECT que vamos a ejecutar
  DECLARE paquetes_cursor CURSOR FOR 
    SELECT Paquete.idPaquete,Paquete.nombre FROM Paquete;

-- Condición de salida
DECLARE CONTINUE HANDLER FOR NOT FOUND SET fin=1;

DROP TEMPORARY TABLE IF EXISTS PaqueteVentas;

CREATE TEMPORARY TABLE PaqueteVentas(
idPaquete int primary key not null auto_increment,
nombre Varchar(50) not null,
cantVentas int not null
);

  OPEN paquetes_cursor;
  get_paquetes: LOOP
    FETCH paquetes_cursor INTO vIdPaquete,vNombre;
    IF fin = 1 THEN
       LEAVE get_paquetes;
    END IF;

SET vCantVentas = (Select count(Venta.idEmpleado) from Paquete inner join Venta on
  Paquete.idPaquete = Venta.idPaquete where Paquete.idPaquete = vIdPaquete);
  INSERT INTO PaqueteVentas (idPaquete,nombre,cantVentas) 
  values (vIdPaquete,vNombre,vCantVentas);
# INSERT INTO ComisionxVenta(idEmpleado,idVenta,monto,fecha) 
# values (vIdEmpleado,vIdVenta,((vMontoTotal/100)*vPorcentajeComision),curdate());
 
  END LOOP get_paquetes;

  CLOSE paquetes_cursor;

Select * from PaqueteVentas order by cantVentas DESC;

DROP TEMPORARY TABLE IF EXISTS PaqueteVentas;
END
$$

DELIMITER ;

SET SQL_MODE=@OLD_SQL_MODE;
SET FOREIGN_KEY_CHECKS=@OLD_FOREIGN_KEY_CHECKS;
SET UNIQUE_CHECKS=@OLD_UNIQUE_CHECKS;
